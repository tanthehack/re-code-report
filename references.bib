
@book{buschmann_pattern-oriented_1996,
	title = {Pattern-oriented software architecture},
	publisher = {Wiley},
	author = {Buschmann, Frank and Schmidt, Douglas C and Kircher, Michael},
	year = {1996},
}

@article{shepperd_critique_1988,
	title = {A critique of cyclomatic complexity as a software metric},
	volume = {3},
	doi = {10.1049/sej.1988.0003},
	journal = {Software Engineering Journal},
	author = {Shepperd, Martin},
	year = {1988},
	pages = {30},
}

@article{bancroft_program_2006,
	title = {Program annotations: {Feedback} for students learning to program},
	urldate = {2024-04-01},
	author = {Bancroft, Peter and Roe, Paul},
	month = jan,
	year = {2006},
	pages = {19--23},
}

@inproceedings{Oliveira_2020,
  author={Oliveira, Delano and Bruno, Reydne and Madeiral, Fernanda and Castor, Fernando},
  booktitle={2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Evaluating Code Readability and Legibility: An Examination of Human-centric Studies}, 
  year={2020},
  volume={},
  number={},
  pages={348-359},
  keywords={Software maintenance;Systematics;Bibliographies;Taxonomy;Programming;Task analysis;Software engineering;Code readability;code legibility;code understandability;code understanding;program comprehension},
  doi={10.1109/ICSME46990.2020.00041}
  }

  
@inproceedings{kohlbacher_common_2023,
	address = {Prague, Czech Republic},
	title = {Common {Code} {Quality} {Issues} of {Novice} {Java} {Programmers}: {A} {Comprehensive} {Analysis} of {Student} {Assignments}:},
	isbn = {978-989-758-641-5},
	shorttitle = {Common {Code} {Quality} {Issues} of {Novice} {Java} {Programmers}},
	url = {https://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0011715400003470},
	doi = {10.5220/0011715400003470},
	urldate = {2024-07-13},
	booktitle = {Proceedings of the 15th {International} {Conference} on {Computer} {Supported} {Education}},
	publisher = {SCITEPRESS - Science and Technology Publications},
	author = {Kohlbacher, Christina and Vierhauser, Michael and Groher, Iris},
	year = {2023},
	pages = {349--356},
	}


  @inproceedings{Kirk_2020,
author = {Kirk, Diana and Crow, Tyne and Luxton-Reilly, Andrew and Tempero, Ewan},
title = {On Assuring Learning About Code Quality},
year = {2020},
isbn = {9781450376860},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3373165.3373175},
doi = {10.1145/3373165.3373175},
abstract = {Most of the lifetime cost of a software product is incurred after it is first delivered, i.e. during the maintenance phase. It is generally acknowledged that the quality of the code significantly impacts maintenance costs. This suggests that "code quality" should be a key competency of graduates of computing qualifications. We examined the learning outcomes of 141 University courses on introduction to programming and found that only about 30\% mention any code quality-related topic. In contrast, the relevant national high school assessment framework used in New Zealand requires that, in order to be successful, a student must demonstrate some understanding of code quality. Our recommendation is that, if we are to be confident about producing code-quality-capable students, we must consider adopting agreed achievement standards for code quality.},
booktitle = {Proceedings of the Twenty-Second Australasian Computing Education Conference},
pages = {86–94},
numpages = {9},
keywords = {university, style, software quality, programming, high school, digital technologies, curriculum, computing education, code quality, NCEA, K-12, CS1},
location = {Melbourne, VIC, Australia},
series = {ACE'20}
}

@inproceedings{shen_2020,
  author={Shen, Ruiqi and Lee, Michael J.},
  booktitle={2020 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)}, 
  title={Learners’ Perspectives on Learning Programming from Interactive Computer Tutors in a MOOC}, 
  year={2020},
  volume={},
  number={},
  pages={1-5},
  keywords={Computer aided instruction;Visualization;Electronic learning;Codes;Costs;Turning;Feature extraction;interactive computer tutor;Codecademy;programming education;learners’ view;grounded theory;Quora},
  doi={10.1109/VL/HCC50065.2020.9127270}}



@article{kostyrko_learning_2023,
	title = {{LEARNING} {PROGRAMMING} {USING} {STRUCTURED} {BLOCK} {DIAGRAMS} {AND} {DESIGN} {TEMPLATES}},
	volume = {490},
	issn = {23113405},
	url = {http://znp.nuos.mk.ua/archives/2023/1/23.pdf},
	doi = {10.15589/znp2023.1(490).23},
	number = {1},
	urldate = {2024-07-13},
	journal = {Collection of Scientific Publications NUS},
	author = {Kostyrko, Vasyl S. and Kostenko, Anatolij V. and Plesha, Mykhaylo I.},
	year = {2023},
	pages = {191--197},
}


@inproceedings{sadowski_modern_2018,
	address = {New York, NY, USA},
	series = {{ICSE}-{SEIP} '18},
	title = {Modern code review: a case study at google},
	isbn = {978-1-4503-5659-6},
	url = {https://doi.org/10.1145/3183519.3183525},
	doi = {10.1145/3183519.3183525},
	abstract = {Employing lightweight, tool-based code review of code changes (aka modern code review) has become the norm for a wide variety of open-source and industrial systems. In this paper, we make an exploratory investigation of modern code review at Google. Google introduced code review early on and evolved it over the years; our study sheds light on why Google introduced this practice and analyzes its current status, after the process has been refined through decades of code changes and millions of code reviews. By means of 12 interviews, a survey with 44 respondents, and the analysis of review logs for 9 million reviewed changes, we investigate motivations behind code review at Google, current practices, and developers' satisfaction and challenges.},
	booktitle = {Proceedings of the 40th {International} {Conference} on {Software} {Engineering}: {Software} {Engineering} in {Practice}},
	publisher = {Association for Computing Machinery},
	author = {Sadowski, Caitlin and Söderberg, Emma and Church, Luke and Sipko, Michal and Bacchelli, Alberto},
	year = {2018},
	note = {event-place: Gothenburg, Sweden},
	pages = {181--190},
}

@article{kourie_reflections_2008,
	title = {Reflections on coding standards in tertiary computer science education},
	volume = {41},
	urldate = {2024-04-01},
	journal = {South African Computer Journal},
	author = {Kourie, Derrick G and Pieterse, Vreda},
	month = jan,
	year = {2008},
	note = {Publisher: South African Institute of Computer Scientists and Information Technologists},
	pages = {29--37},
}

@misc{smit_code_2011,
	title = {Code convention adherence in evolving software},
	url = {https://ieeexplore.ieee.org/abstract/document/6080819/},
	urldate = {2023-09-14},
	publisher = {IEEE Xplore},
	author = {Smit, Michael and Gergel, Barry and Hoover, H. James and Stroulia, Eleni},
	month = sep,
	year = {2011},
	doi = {10.1109/ICSM.2011.6080819},
	note = {Pages: 504–507},
}

@article{rodrigues_towards_2019,
	title = {Towards a structured specification of coding conventions},
	doi = {10.1109/prdc47002.2019.00047},
	urldate = {2024-04-02},
	author = {Rodrigues, Elder and Montecchi, Leonardo},
	month = dec,
	year = {2019},
}

@book{pressman_software_2014,
	title = {Software engineering : a practitioner's approach},
	publisher = {Mcgraw-Hill Education},
	author = {Pressman, Roger S and Maxim, Bruce R},
	year = {2014},
}

@article{pratap_evolution_2023,
	title = {The evolution of computer programming languages},
	volume = {3},
	doi = {10.48175/ijarsct-13110},
	urldate = {2024-04-02},
	journal = {International Journal of Advanced Research in Science, Communication and Technology},
	author = {Pratap, Prathamesh},
	month = oct,
	year = {2023},
	note = {Publisher: Shivkrupa Publication's},
	pages = {69--76},
}

@book{barron_structured_1972,
	title = {Structured {Programming}, {O}.-{J}. {Dahl}, {E}. {W}. {Dijkstra} and {C}. {A}. {R}. {Hoare}, {Academic} {Press}, {London},},
	volume = {5},
	urldate = {2022-10-06},
	publisher = {Software: Practice and Experience},
	author = {Barron, D. W.},
	year = {1972},
	doi = {10.1002/spe.4380050313},
}

@misc{medoff_evolution_2015,
	title = {The evolution of coding standards},
	url = {https://www.exida.com/Blog/the-evolution-of-coding-standards},
	urldate = {2024-04-02},
	publisher = {www.exida.com},
	author = {Medoff, Michael},
	month = jun,
	year = {2015},
}

@article{chen_automated_2018,
	title = {An automated assessment system for analysis of coding convention violations in {Java} programming assignments*},
	volume = {34},
	doi = {10.6688/JISE.201809_34(5).0006},
	journal = {Journal of Information Science and Engineering},
	author = {Chen, Hsi-Min and Chen, W.-H and Lee, C.-C},
	month = sep,
	year = {2018},
	pages = {1203--1221},
}

@book{structured,
	title = {Structured programming},
	publisher = {Academic Press Ltd.},
	author = {Dijkstra, E. W. and Dahl, O. J and Hoare, C. A. R.},
	year = {1972},
}

@article{wiese_teaching_2017,
	title = {Teaching students to recognize and implement good coding style},
	doi = {10.1145/3051457.3051469},
	journal = {Proceedings of the Fourth (2017) ACM Conference on Learning},
	author = {Wiese, Eliane S. and Yen, Michael and Chen, Antares and Santos, Lucas A. and Fox, Armando},
	month = apr,
	year = {2017},
}

@inproceedings{keuning_tutoring_2021,
	address = {New York, NY, USA},
	series = {{SIGCSE} '21},
	title = {A {Tutoring} {System} to {Learn} {Code} {Refactoring}},
	isbn = {978-1-4503-8062-1},
	url = {https://doi.org/10.1145/3408877.3432526},
	doi = {10.1145/3408877.3432526},
	abstract = {In the last few decades, numerous tutoring systems and assessment tools have been developed to support students with learning programming, giving hints on correcting errors, showing which test cases do not succeed, and grading their overall solutions. The focus has been less on helping students write code with good style and quality. There are several professional tools that can help, but they are not targeted at novice programmers.This paper describes a tutoring system that lets students practice with improving small programs that are already functionally correct. The system is based on rules that are extracted from input by teachers collected in a preliminary study, a subset of rules taken from professional tools, and other literature. Rules define how a code construct can be rewritten into a better variant, without changing its functionality. Rules can be combined to form rewrite strategies, similar to refactorings offered by most IDEs. The student can ask for hints and feedback at each step.We describe the design of the system, show example sessions, and evaluate and discuss its contribution and limitations.},
	booktitle = {Proceedings of the 52nd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Keuning, Hieke and Heeren, Bastiaan and Jeuring, Johan},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {code quality, learning programming, refactoring, tutoring systems},
	pages = {562--568},
}

@inproceedings{kim_understanding_2022,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2022},
	title = {Understanding automated code review process and developer experience in industry},
	isbn = {978-1-4503-9413-0},
	url = {https://doi.org/10.1145/3540250.3558950},
	doi = {10.1145/3540250.3558950},
	booktitle = {Proceedings of the 30th {ACM} {Joint} {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Kim, Hyungjin and Kwon, Yonghwi and Joh, Sangwoo and Kwon, Hyukin and Ryou, Yeonhee and Kim, Taeksu},
	year = {2022},
	note = {event-place: {\textless}conf-loc{\textgreater}, {\textless}city{\textgreater}Singapore{\textless}/city{\textgreater}, {\textless}country{\textgreater}Singapore{\textless}/country{\textgreater}, {\textless}/conf-loc{\textgreater}},
	keywords = {code review, code review automation, review bot, static analysis},
	pages = {1398--1407},
}

@inproceedings{wessel_what_2020,
	address = {New York, NY, USA},
	series = {{SBES} '20},
	title = {What to {Expect} from {Code} {Review} {Bots} on {GitHub}? {A} {Survey} with {OSS} {Maintainers}},
	isbn = {978-1-4503-8753-8},
	url = {https://doi.org/10.1145/3422392.3422459},
	doi = {10.1145/3422392.3422459},
	abstract = {Software bots are used by Open Source Software (OSS) projects to streamline the code review process. Interfacing between developers and automated services, code review bots report continuous integration failures, code quality checks, and code coverage. However, the impact of such bots on maintenance tasks is still neglected. In this paper, we study how project maintainers experience code review bots. We surveyed 127 maintainers and asked about their expectations and perception of changes incurred by code review bots. Our findings reveal that the most frequent expectations include enhancing the feedback bots provide to developers, reducing the maintenance burden for developers, and enforcing code coverage. While maintainers report that bots satisfied their expectations, they also perceived unexpected effects, such as communication noise and newcomers' dropout. Based on these results, we provide a series of implications for bot developers, as well as insights for future research.},
	booktitle = {Proceedings of the {XXXIV} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Wessel, Mairieli and Serebrenik, Alexander and Wiese, Igor and Steinmacher, Igor and Gerosa, Marco A.},
	year = {2020},
	note = {event-place: {\textless}conf-loc{\textgreater}, {\textless}city{\textgreater}Natal{\textless}/city{\textgreater}, {\textless}country{\textgreater}Brazil{\textless}/country{\textgreater}, {\textless}/conf-loc{\textgreater}},
	keywords = {code review, open source software, pull-based model, software bots},
	pages = {457--462},
}

@article{badampudi_modern_2023,
	title = {Modern {Code} {Reviews}—{Survey} of {Literature} and {Practice}},
	volume = {32},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3585004},
	doi = {10.1145/3585004},
	abstract = {Background: Modern Code Review (MCR) is a lightweight alternative to traditional code inspections. While secondary studies on MCR exist, it is uanknown whether the research community has targeted themes that practitioners consider important.Objectives: The objectives are to provide an overview of MCR research, analyze the practitioners’ opinions on the importance of MCR research, investigate the alignment between research and practice, and propose future MCR research avenues.Method: We conducted a systematic mapping study to survey state of the art until and including 2021, employed the Q-Methodology to analyze the practitioners’ perception of the relevance of MCR research, and analyzed the primary studies’ research impact.Results: We analyzed 244 primary studies, resulting in five themes. As a result of the 1,300 survey data points, we found that the respondents are positive about research investigating the impact of MCR on product quality and MCR process properties. In contrast, they are negative about human factor– and support systems–related research.Conclusion: These results indicate a misalignment between the state of the art and the themes deemed important by most survey respondents. Researchers should focus on solutions that can improve the state of MCR practice. We provide an MCR research agenda that can potentially increase the impact of MCR research.},
	number = {4},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Badampudi, Deepika and Unterkalmsteiner, Michael and Britto, Ricardo},
	month = may,
	year = {2023},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {literature survey, Modern code review, practitioner survey},
}

@article{joni_but_1986,
	title = {But {My} {Program} {Runs}! {Discourse} {Rules} for {Novice} {Programmers}},
	volume = {2},
	doi = {10.2190/6E5W-AR7C-NX76-HUT2},
	journal = {Journal of Educational Computing Research},
	author = {Joni, Saj-Nicole and Soloway, Elliot},
	month = feb,
	year = {1986},
}

@inproceedings{ruvo_understanding_2018,
	title = {Understanding semantic style by analysing student code},
	doi = {10.1145/3160489.3160500},
	author = {Ruvo, Giuseppe and Tempero, Ewan and Luxton-Reilly, Andrew and Rowe, Gerard and Giacaman, Nasser},
	month = jan,
	year = {2018},
	pages = {73--82},
}

@inproceedings{popic_benefits_2018,
	title = {The {Benefits} of the {Coding} {Standards} {Enforcement} and its {Impact} on the {Developers} {Coding} {Behaviour}-{A} {Case} {Study} on {Two} {Small} {Projects}},
	doi = {10.1109/℡FOR.2018.8612149},
	author = {Popić, Srđan and Velikic, Gordana and Jaroslav, Hlavač and Spasic, Zvjezdan and Vulić, Marko},
	month = nov,
	year = {2018},
}

@inproceedings{oviedo_1984,
  title={Control flow, data flow and program complexity},
  author={Enrique Ivan Oviedo},
  year={1984},
  url={https://api.semanticscholar.org/CorpusID:56561877}
}

@article{digkas_can_2022,
	title = {Can {Clean} {New} {Code} {Reduce} {Technical} {Debt} {Density}?},
	volume = {48},
	issn = {1939-3520},
	doi = {10.1109/TSE.2020.3032557},
	abstract = {While technical debt grows in absolute numbers as software systems evolve over time, the density of technical debt (technical debt divided by lines of code) is reduced in some cases. This can be explained by either the application of refactorings or the development of new artifacts with limited Technical Debt. In this paper we explore the second explanation, by investigating the relation between the amount of Technical Debt in new code and the evolution of Technical Debt in the system. To this end, we compare the Technical Debt Density of new code with existing code, and we investigate which of the three major types of code changes (additions, deletions and modifications) is primarily responsible for changes in the evolution of Technical Debt density. Furthermore, we study whether there is a relation between code quality practices and the ‘cleanness’ of new code. To obtain the required data, we have performed a large-scale case study on twenty-seven open-source software projects by the Apache Software Foundation, analyzing 66,661 classes and 56,890 commits. The results suggest that writing “clean” (or at least “cleaner”) new code can be an efficient strategy for reducing Technical Debt Density, and thus preventing software decay over time. The findings also suggest that projects adopting an explicit policy for quality improvement, e.g., through discussions on code quality in board meetings, are associated with a higher frequency of cleaner new code commits. Therefore, we champion the establishment of processes that monitor the density of Technical Debt of new code to control the accumulation of Technical Debt in a software system.},
	number = {05},
	journal = {IEEE Transactions on Software Engineering},
	author = {Digkas, G. and Chatzigeorgiou, A. and Ampatzoglou, A. and Avgeriou, P.},
	month = may,
	year = {2022},
	note = {Place: Los Alamitos, CA, USA
Publisher: IEEE Computer Society},
	keywords = {open source software, logic gates, maintenance engineering, market research, monitoring, writing},
	pages = {1705--1721},
}

@inproceedings{han_does_2020,
	title = {Does code review really remove coding convention violations?},
	doi = {10.1109/SCAM51674.2020.00010},
	booktitle = {2020 {IEEE} 20th {International} {Working} {Conference} on {Source} {Code} {Analysis} and {Manipulation} ({SCAM})},
	author = {Han, DongGyun and Ragkhitwetsagul, Chaiyong and Krinke, Jens and Paixao, Matheus and Rosa, Giovanni},
	year = {2020},
	keywords = {code review, coding conventions, coding style, Conferences, Encoding, Inspection, Manuals, Software, Tools},
	pages = {43--53},
}

@misc{hartford_dolphin-mixtral-8x7b_2023,
	title = {dolphin-mixtral-8x7b},
	url = {https://erichartford.com/dolphin-25-mixtral-8x7b},
	urldate = {2024-04-03},
	publisher = {Cognitive Computations},
	author = {Hartford, Eric},
	month = dec,
	year = {2023},
	note = {Backup Publisher: Cognitive Computations},
}

@misc{institutedata_understanding_2023,
	title = {Understanding coding conventions in software engineering {\textbar} institute of data},
	url = {https://www.institutedata.com/blog/software-engineering-coding-conventions/},
	publisher = {Institute of Data},
	author = {{InstituteData}},
	month = oct,
	year = {2023},
}

@book{beck_extreme_1999,
	title = {Extreme {Programming} {Explained}: {Embrace} {Change}},
	publisher = {Addison-Wesley Publishing Company},
	author = {Beck, Kent},
	year = {1999},
	keywords = {extreme programming beck},
}

@misc{google_google_nodate,
	title = {Google javascript style guide},
	url = {https://google.github.io/styleguide/jsguide.html},
	publisher = {google.github.io},
	author = {{Google}},
}

@book{meyer_object-oriented_1997,
	address = {USA},
	title = {Object-oriented software construction (2nd ed.)},
	isbn = {0-13-629155-4},
	publisher = {Prentice-Hall, Inc.},
	author = {Meyer, Bertrand},
	year = {1997},
}

@misc{van_rossum_pep_2001,
	title = {{PEP} 8 – {Style} {Guide} for {Python} {Code} {\textbar} peps.python.org},
	url = {https://peps.python.org/pep-0008/},
	publisher = {peps.python.org},
	author = {van Rossum, Guido and Warsaw, Barry and Coghlan, Nick},
	month = jul,
	year = {2001},
}

@book{kernighan_c_1978,
	address = {USA},
	title = {The {C} programming language},
	isbn = {0-13-110163-3},
	publisher = {Prentice-Hall, Inc.},
	author = {Kernighan, B. W. and Ritchie, D. M.},
	year = {1978},
}

@misc{wikipedia_contributors_naming_2024,
	title = {Naming convention (programming) — {Wikipedia}, {The} {Free} {Encyclopedia}},
	url = {https://en.wikipedia.org/w/index.php?title=Naming_convention_(programming)&oldid=1196522046},
	author = {{Wikipedia contributors}},
	year = {2024},
}

@misc{pugh_brief_2018,
	title = {A brief list of programming naming conventions},
	url = {https://www.deanpugh.com/a-brief-list-of-programming-naming-conventions},
	urldate = {2024-04-03},
	publisher = {deanpugh.com},
	author = {Pugh, Dean},
	month = mar,
	year = {2018},
}

@misc{piater_formatting_2005,
	title = {Formatting},
	url = {https://iis.uibk.ac.at/public/piater/courses/Coding-Style/ar01s03.html},
	urldate = {2024-04-03},
	publisher = {iis.uibk.ac.at},
	author = {Piater, Justus},
	month = jan,
	year = {2005},
}

@misc{broad_research_communication_lab_coding_nodate,
	title = {Coding and comment style : {Broad} institute of {MIT} and harvard},
	url = {https://mitcommlab.mit.edu/broad/commkit/coding-and-comment-style/},
	publisher = {mitcommlab.mit.edu},
	author = {{Broad Research Communication Lab}},
}

@misc{herka_naming_2022,
	title = {Naming conventions in programming – a review of scientific literature — {Makimo} – {Consultancy} \& {Software} {Development} {Services}},
	url = {https://makimo.com/blog/scientific-perspective-on-naming-in-programming/},
	publisher = {makimo.com},
	author = {Herka, Iwo},
	month = feb,
	year = {2022},
}

@inproceedings{tufano_when_2015,
	title = {When and {Why} {Your} {Code} {Starts} to {Smell} {Bad}},
	volume = {1},
	doi = {10.1109/ICSE.2015.59},
	booktitle = {2015 {IEEE}/{ACM} 37th {IEEE} {International} {Conference} on {Software} {Engineering}},
	author = {Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Oliveto, Rocco and Di Penta, Massimiliano and De Lucia, Andrea and Poshyvanyk, Denys},
	year = {2015},
	keywords = {Software, Androids, bad code smells, Ecosystems, empirical study, History, Humanoid robots, Maintenance engineering, Measurement, mining software repositories},
	pages = {403--414},
}

@article{verma_code_2023,
	title = {Code smell prioritization in object-oriented software systems: {A} systematic literature review},
	volume = {35},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2536},
	doi = {https://doi.org/10.1002/smr.2536},
	abstract = {Abstract Code smells indicate poor design and imperfection in coding style. They increase maintenance costs and degrade software quality. Detecting and mitigating these code smells reduce the effects of flaws present in the software design. However, to save time and effort, it is a good practice to prioritize critical code smells and resolve them first. There have been various empirical studies on code smell prioritization in the last decades. Although the research community has been continuously working on the prioritization of code smells, yet a systematic mapping of all these studies would provide a panorama of research work. With this motivation, we selected 39 primary studies published between May 2011 and May 2022 and classified them based on seven factors: (i) code smells, (ii) factors, (iii) evaluation techniques, (iv) tools, (v) ranking formulas, (vi) data sets used, and (vii) measurements used for validating the research work. This paper aims to outline and discuss the prioritization procedure for code smells in object-oriented software systems. The issues and recommendations for every question act as input for the researchers and industrialists for further research. Some issues for further investigation are less coverage of architecture smells, limited ranking formulas, lack of automated evaluation techniques, and so forth.},
	number = {12},
	journal = {Journal of Software: Evolution and Process},
	author = {Verma, Renu and Kumar, Kuldeep and Verma, Harsh K.},
	year = {2023},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.2536},
	keywords = {code smell, object-oriented system, prioritization, systematic literature review},
	pages = {e2536},
}

@article{pandey_framework_2020,
	title = {A {Framework} for {Producing} {Effective} and {Efficient} {Secure} {Code} through {Malware} {Analysis}},
	volume = {11},
	url = {http://dx.doi.org/10.14569/IJACSA.2020.0110263},
	doi = {10.14569/IJACSA.2020.0110263},
	number = {2},
	journal = {International Journal of Advanced Computer Science and Applications},
	author = {Pandey, Abhishek Kumar and Tripathi, Ashutosh and Alenezi, Mamdouh and Agrawal, Alka and Kumar, Rajeev and Khan, Raees Ahmad},
	year = {2020},
	note = {Publisher: The Science and Information Organization},
}

@inproceedings{keuning_systematic_2023,
	address = {New York, NY, USA},
	series = {{ITiCSE} 2023},
	title = {A {Systematic} {Mapping} {Study} of {Code} {Quality} in {Education}},
	isbn = {9798400701382},
	url = {https://doi.org/10.1145/3587102.3588777},
	doi = {10.1145/3587102.3588777},
	abstract = {While functionality and correctness of code has traditionally been the main focus of computing educators, quality aspects of code are getting increasingly more attention. High-quality code contributes to the maintainability of software systems, and should therefore be a central aspect of computing education. We have conducted a systematic mapping study to give a broad overview of the research conducted in the field of code quality in an educational context. The study investigates paper characteristics, topics, research methods, and the targeted programming languages. We found 195 publications (1976-2022) on the topic in multiple databases, which we systematically coded to answer the research questions. This paper reports on the results and identifies developments, trends, and new opportunities for research in the field of code quality in computing education.},
	booktitle = {Proceedings of the 2023 {Conference} on {Innovation} and {Technology} in {Computer} {Science} {Education} {V}. 1},
	publisher = {Association for Computing Machinery},
	author = {Keuning, Hieke and Jeuring, Johan and Heeren, Bastiaan},
	year = {2023},
	note = {event-place: {\textless}conf-loc{\textgreater}, {\textless}city{\textgreater}Turku{\textless}/city{\textgreater}, {\textless}country{\textgreater}Finland{\textless}/country{\textgreater}, {\textless}/conf-loc{\textgreater}},
	keywords = {code quality, refactoring, code smells, programming education, software engineering education, systematic mapping study},
	pages = {5--11},
}

@inproceedings{stegeman_designing_2016,
	address = {New York, NY, USA},
	series = {Koli {Calling} '16},
	title = {Designing a rubric for feedback on code quality in programming courses},
	isbn = {978-1-4503-4770-9},
	url = {https://doi.org/10.1145/2999541.2999555},
	doi = {10.1145/2999541.2999555},
	abstract = {We investigate how to create a rubric that can be used to give feedback on code quality to students in introductory programming courses. Based on an existing model of code quality and a set of preliminary design rules, we constructed a rubric and put it through several design iterations. Each iteration focused on different aspects of the rubric, and solutions to various programming assignments were used to evaluate. The rubric appears to be complete for the assignments it was tested on. We articulate additional design aspects that can be used when drafting new feedback rubrics for programming courses.},
	booktitle = {Proceedings of the 16th {Koli} {Calling} {International} {Conference} on {Computing} {Education} {Research}},
	publisher = {Association for Computing Machinery},
	author = {Stegeman, Martijn and Barendsen, Erik and Smetsers, Sjaak},
	year = {2016},
	note = {event-place: Koli, Finland},
	keywords = {code quality, programming education, assessment, feedback, rubrics},
	pages = {160--164},
}

@book{fowler_refactoring_1999,
	address = {Boston, MA, USA},
	title = {Refactoring: {Improving} the {Design} of {Existing} {Code}},
	isbn = {0-201-48567-2},
	publisher = {Addison-Wesley},
	author = {Fowler, Martin},
	year = {1999},
	keywords = {evolution refactoring software},
}

@misc{reynolds_code_2022,
	title = {Code smells: {What} are they and how can {I} prevent them?},
	url = {https://linearb.io/blog/what-is-a-code-smell},
	publisher = {linearb.io},
	author = {Reynolds, Justin},
	month = may,
	year = {2022},
}

@article{sas_quality_2020,
	title = {Quality attribute trade-offs in the embedded systems industry: an exploratory case study},
	volume = {28},
	issn = {0963-9314},
	url = {https://doi.org/10.1007/s11219-019-09478-x},
	doi = {10.1007/s11219-019-09478-x},
	abstract = {The embedded systems domain has grown exponentially over the past years. The industry is forced by the market to rapidly improve and release new products to beat the competition. Frenetic development rhythms thus shape this domain and give rise to several new challenges for software design and development. One of them is dealing with trade-offs between run-time and design-time quality attributes. To study practices, processes and tools concerning the management of run-time and design-time quality attributes as well as the trade-offs among them from the perspective of embedded systems software engineers. An exploratory case study with two qualitative data collection steps, namely interviews and a focus group, involving six different companies from the embedded systems domain with a total of twenty participants. The interviewed subjects showed a preference for run-time over design-time qualities. Trade-offs between design-time and run-time qualities are very common, but they are often implicit, due to the lack of adequate monitoring tools and practices. Practitioners prefer to deal with trade-offs in the most lightweight way possible, by applying ad-hoc practices, thus avoiding any overhead incurred. Finally, practitioners have elaborated on how they envision the ideal tool support for dealing with trade-offs. Although it is notoriously difficult to deal with trade-offs, constantly monitoring the quality attributes of interest with automated tools is key in making explicit and prudent trade-offs and mitigating the risk of incurring technical debt.},
	number = {2},
	journal = {Software Quality Journal},
	author = {Sas, Darius and Avgeriou, Paris},
	month = jun,
	year = {2020},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Dependability, Embedded systems, Empirical study, Energy efficiency, Technical debt, Trade-off},
	pages = {505--534},
}

@article{albuquerque_integrating_2023,
	title = {Integrating {Interactive} {Detection} of {Code} {Smells} into {Scrum}: {Feasibility}, {Benefits}, and {Challenges}},
	volume = {13},
	issn = {2076-3417},
	url = {https://www.mdpi.com/2076-3417/13/15/8770},
	doi = {10.3390/app13158770},
	abstract = {(Context) Code smells indicate poor coding practices or design flaws, suggesting deeper software quality issues. While addressing code smells promptly improves software quality, traditional detection techniques often fail in continuous detection during software development. (Problem Statement) More recently, Interactive Detection (ID) technique has been proposed, enabling the detection of code smells continuously. Although the use of this technique by developers and organizations is promising, there are no practical recommendations for its use in the context of software development. (Goal) The objective of this study was to propose and evaluate the integration of ID into the widely adopted Scrum framework for agile software development. (Method) To achieve this objective, we utilized a mixed-method approach that combined a comprehensive literature review and expert knowledge to propose the integration. Furthermore, we conducted a focus group and a controlled experiment involving software development activities to evaluate this integration. (Results) The findings revealed that this integration significantly benefitted software development, such as early detection of code smells, increased effectiveness in code smell detection, and improved code quality. These findings shed light on the potential benefits of adopting this integration, offering valuable insights for developers and researchers. (Conclusions) This research emphasized the importance of continuous code smell detection as an integral part of agile development and opened avenues for further research in code quality management within agile methodologies.},
	number = {15},
	journal = {Applied Sciences},
	author = {Albuquerque, Danyllo and Guimarães, Everton and Perkusich, Mirko and Almeida, Hyggo and Perkusich, Angelo},
	year = {2023},
}

@misc{sonar_source_what_nodate,
	title = {What is code quality? {Definition} guide},
	url = {https://www.sonarsource.com/learn/code-quality/},
	publisher = {www.sonarsource.com},
	author = {{Sonar Source}},
}

@article{fan_efficiently_2018,
	series = {{ASE} '18},
	title = {Efficiently manifesting asynchronous programming errors in {Android} apps},
	url = {https://doi.org/10.1145/3238147.3238170},
	doi = {10.1145/3238147.3238170},
	journal = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
	author = {Fan, Lingling and Su, Ting and Chen, Sen and Meng, Guozhu and Liu, Yang and Xu, Lihua and Pu, Geguang},
	year = {2018},
	note = {ISBN: 9781450359375
Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {static analysis, Android, Asynchronous programming error, testing},
	pages = {486--497},
}

@article{alberto_bacchelli_expectations_2013,
	title = {Expectations, outcomes, and challenges of modern code review},
	url = {https://api.semanticscholar.org/CorpusID:220663293},
	journal = {2013 35th International Conference on Software Engineering (ICSE)},
	author = {Alberto, Bacchelli and Christian, Bird},
	year = {2013},
	pages = {712--721},
}

@article{j_siow_core_2019,
	title = {{CORE}: {Automating} {Review} {Recommendation} for {Code} {Changes}},
	url = {https://api.semanticscholar.org/CorpusID:209439473},
	journal = {2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	author={JingKai, Siow and Cuiyun, Gao and Lingling, Fan and Sen, Chen and Yang, Liu},
	year = {2019},
	pages = {284--295},
}

@article{rivindu_recent_2017,
  title={Recent Advances in Natural Language Generation: A Survey and Classification of the Empirical Literature},
  author={Rivindu Perera and Parma Nand},
  journal={Comput. Informatics},
  year={2017},
  volume={36},
  pages={1-32},
  url={https://api.semanticscholar.org/CorpusID:263896381}
}

@incollection{ovchinnikova_natural_2012,
	address = {Paris},
	title = {Natural {Language} {Understanding} and {World} {Knowledge}},
	isbn = {978-94-91216-53-4},
	url = {https://doi.org/10.2991/978-94-91216-53-4_2},
	abstract = {In artificial intelligence and computational linguistics, natural language understanding (NLU) is a subfield of natural language processing that deals with machine reading comprehension. The goal of an NLU system is to interpret an input text fragment. The process of interpretation can be viewed as a translation of the text from a natural language to a representation in an unambiguous formal language. This representation, supposed to expressthe text's content, is further used for performing concrete tasks implied by a user request},
	booktitle = {Integration of {World} {Knowledge} for {Natural} {Language} {Understanding}},
	publisher = {Atlantis Press},
	author = {Ovchinnikova, Ekaterina},
	year = {2012},
	doi = {10.2991/978-94-91216-53-4_2},
	pages = {15--37},
}


@article{balachandran_reducing_2013,
	title = {Reducing human effort and improving quality in peer code reviews using automatic static analysis and reviewer recommendation},
	url = {https://api.semanticscholar.org/CorpusID:15823436},
	journal = {2013 35th International Conference on Software Engineering (ICSE)},
	author = {Balachandran, Vipin},
	year = {2013},
	pages = {931--940},
}

@inproceedings{gupta_intelligent_2018,
	title = {Intelligent code reviews using deep learning},
	url = {https://api.semanticscholar.org/CorpusID:52219239},
	author = {Gupta, Anshul},
	year = {2018},
}

@article{makkar_reinforcement_2024,
	title={Reinforcement Learning: A Comprehensive Overview},
	author={Priyanka, Makkar},
	journal={International Journal of Innovative Research in Computer Science and Technology},
	year={2024},
	url={https://api.semanticscholar.org/CorpusID:269407468}
}

@inproceedings{bielik_learning_2017,
	title = {Learning a {Static} {Analyzer} from {Data}},
	isbn = {978-3-319-63386-2},
	doi = {10.1007/978-3-319-63387-9_12},
	author = {Bielik, Pavol and Raychev, Veselin and Vechev, Martin},
	month = jul,
	year = {2017},
	pages = {233--253},
}

@inproceedings{ilyas_static_2016,
	title = {Static {Code} {Analysis}: {A} {Systematic} {Literature} {Review} and an {Industrial} {Survey}},
	url = {https://api.semanticscholar.org/CorpusID:65258085},
	author = {Ilyas, Bilal and Elkhalifa, Islam},
	year = {2016},
}

@book{moller_static_2020,
	title = {Static {Program} {Analysis}},
	url = {https://cs.au.dk/~amoeller/spa/},
	publisher = {Department of Computer Science, Aarhus University},
	author = {Møller, Anders and Schwartzbach, Michael I.},
	month = nov,
	year = {2020},
}

@inproceedings{danilo_analysis_2021,
	title = {Analysis of the {Tools} for {Static} {Code} {Analysis}},
	doi = {10.1109/INFOTEH51037.2021.9400688},
	author = {Danilo, Nikolić and Stefanović, Darko and Dakic, Dusanka and Sladojevic, Srdan and Ristic, Sonja},
	month = mar,
	year = {2021},
	pages = {1--6},
}

@inproceedings{nachtigall_explaining_2019,
	title = {Explaining {Static} {Analysis} - {A} {Perspective}},
	doi = {10.1109/ASEW.2019.00023},
	booktitle = {2019 34th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} {Workshop} ({ASEW})},
	author = {Nachtigall, Marcus and Nguyen Quang Do, Lisa and Bodden, Eric},
	year = {2019},
	keywords = {Explainability, Program analysis, Program understanding, Static analysis, User experience},
	pages = {29--32},
}

@inproceedings{carvalho_ontology-based_2017,
	title = {An {Ontology}-based {Approach} to {Analyzing} the {Occurrence} of {Code} {Smells} in {Software}},
	url = {https://api.semanticscholar.org/CorpusID:21143193},
	booktitle = {International {Conference} on {Enterprise} {Information} {Systems}},
	author = {Carvalho, Luis Paulo da Silva and Novais, Renato Lima and Salvador, Laís do Nascimento and Mendonça, Manoel G.},
	year = {2017},
}

@inproceedings{gupta_systematic_2017,
	title = {A {Systematic} {Literature} {Review}: {Code} {Bad} {Smells} in {Java} {Source} {Code}},
	url = {https://api.semanticscholar.org/CorpusID:5405255},
	booktitle = {Communication {Systems} and {Applications}},
	author = {Gupta, Aakanshi and Suri, Bharti and Misra, Sanjay},
	year = {2017},
}

@article{palomba_diffuseness_2017,
	title = {On the diffuseness and the impact on maintainability of code smells: a large scale empirical investigation},
	volume = {23},
	url = {https://api.semanticscholar.org/CorpusID:215767620},
	journal = {Empirical Software Engineering},
	author = {Palomba, Fabio and Bavota, Gabriele and Penta, Massimiliano Di and Fasano, Fausto and Oliveto, Rocco and Lucia, Andrea De},
	year = {2017},
	pages = {1188 -- 1221},
}

@article{qiao_code_2024,
	title = {Code {Reviewer} {Recommendation} {Based} on a {Hypergraph} with {Multiplex} {Relationships}},
	volume = {abs/2401.10755},
	url = {https://api.semanticscholar.org/CorpusID:267061002},
	journal = {ArXiv},
	author = {Qiao, Yu and Wang, Jian and Cheng, Can and Tang, Wei and Liang, Peng and Zhao, Yuqi and Li, Bing},
	year = {2024},
}

@inproceedings{chirvase_clean_2021,
	title = {Clean {Code} - {Delivering} {A} {Lightweight} {Course}},
	doi = {10.1109/CSCS52396.2021.00075},
	booktitle = {2021 23rd {International} {Conference} on {Control} {Systems} and {Computer} {Science} ({CSCS})},
	author = {Chirvase, Alexandru and Ruse, Laura and Muraru, Mihnea and Mocanu, Mariana and Ciobanu, Vlad},
	year = {2021},
	keywords = {Clean, Code, Code-quality, Control systems, Course, Delivering, Education, Employment, Lightweight, Programming profession, Review, Teaching},
	pages = {420--423},
}

@article{sojer_understanding_2014,
	title = {Understanding the {Drivers} of {Unethical} {Programming} {Behavior}: {The} {Inappropriate} {Reuse} of {Internet}-{Accessible} {Code}},
	volume = {forthcoming},
	doi = {10.1080/07421222.2014.995563},
	journal = {Journal of Management Information Systems},
	author = {Sojer, Manuel and Alexy, Oliver and Kleinknecht, Sven and Henkel, Joachim},
	month = jul,
	year = {2014},
}

@inproceedings{albuquerque_perceptions_2022,
	address = {New York, NY, USA},
	series = {{SBES} '22},
	title = {Perceptions of {Technical} {Debt} and its {Management} {Activities} - {A} {Survey} of {Software} {Practitioners}},
	isbn = {978-1-4503-9735-3},
	url = {https://doi.org/10.1145/3555228.3555237},
	doi = {10.1145/3555228.3555237},
	abstract = {Technical Debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefits but might hurt the long-term health of a software system. Although several research efforts have been carried out, TD-related literature indicates that Technical Debt Management (TDM) is still incipient. Particularly in software organizations, there is still a lack of knowledge regarding how practitioners perceive TD and perform TDM in their projects. Our research focuses on characterizing TD and its management under the perspective of practitioners. For doing so, we conducted an online survey with 120 participants from 86 different organizations located in 5 different countries. Our results indicate that TD conception is widespread among more than 70\% of respondents. Most of them (72\%) recognized its importance and impact on software artifacts, being able to provide a valid example of three different TD Types (i.e., Design, Code, and Architectural). In addition, at least 65\% of respondents consider TD identification, TD Repayment, and TD prevention as TDM activities in the spotlight. However, less than 15\% adopt formal approaches to support these activities. This paper contributes to TD discussion and TDM activities by showing the practitioner’s perspective. Finally, further research will support observing how effective and efficient TDM activities can be in different contexts.},
	booktitle = {Proceedings of the {XXXVI} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Albuquerque, Danyllo and Guimaraes, Everton Tavares and Tonin, Graziela Simone and Perkusich, Mirko Barbosa and Almeida, Hyggo and Perkusich, Angelo},
	year = {2022},
	note = {event-place: {\textless}conf-loc{\textgreater}, {\textless}city{\textgreater}Virtual Event{\textless}/city{\textgreater}, {\textless}country{\textgreater}Brazil{\textless}/country{\textgreater}, {\textless}/conf-loc{\textgreater}},
	keywords = {Empirical Study, Survey, Technical Debt, Technical Debt Management},
	pages = {220--229},
}

@inproceedings{ampatzoglou_perception_2016,
	title = {The {Perception} of {Technical} {Debt} in the {Embedded} {Systems} {Domain}: {An} {Industrial} {Case} {Study}},
	doi = {10.1109/MTD.2016.8},
	booktitle = {2016 {IEEE} 8th {International} {Workshop} on {Managing} {Technical} {Debt} ({MTD})},
	author = {Ampatzoglou, Areti and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris and Abrahamsson, Pekka and Martini, Antonio and Zdun, Uwe and Systa, Kari},
	year = {2016},
	keywords = {Embedded systems, case study, Companies, Context, Embedded software, embedded systems, Industries, industry, technical debt, Time division multiplexing},
	pages = {9--16},
}

@inproceedings{rios_causes_2019,
	title = {Causes and {Effects} of the {Presence} of {Technical} {Debt} in {Agile} {Software} {Projects}},
	author = {Rios, Nicolli and Mendonça, Manoel and Seaman, Carolyn and Spínola, Rodrigo},
	month = aug,
	year = {2019},
}

@article{lenarduzzi_systematic_2021,
	title = {A systematic literature review on {Technical} {Debt} prioritization: {Strategies}, processes, factors, and tools},
	volume = {171},
	issn = {0164-1212},
	url = {https://www.sciencedirect.com/science/article/pii/S016412122030220X},
	doi = {https://doi.org/10.1016/j.jss.2020.110827},
	abstract = {Background Software companies need to manage and refactor Technical Debt issues. Therefore, it is necessary to understand if and when refactoring of Technical Debt should be prioritized with respect to developing features or fixing bugs. Objective The goal of this study is to investigate the existing body of knowledge in software engineering to understand what Technical Debt prioritization approaches have been proposed in research and industry. Method We conducted a Systematic Literature Review of 557 unique papers published until 2020, following a consolidated methodology applied in software engineering. We included 44 primary studies. Results Different approaches have been proposed for Technical Debt prioritization, all having different goals and proposing optimization regarding different criteria. The proposed measures capture only a small part of the plethora of factors used to prioritize Technical Debt qualitatively in practice. We present an impact map of such factors. However, there is a lack of empirical and validated set of tools. Conclusion We observed that Technical Debt prioritization research is preliminary and there is no consensus on what the important factors are and how to measure them. Consequently, we cannot consider current research conclusive. In this paper, we therefore outline different directions for necessary future investigations.},
	journal = {Journal of Systems and Software},
	author = {Lenarduzzi, Valentina and Besker, Terese and Taibi, Davide and Martini, Antonio and Fontana, Francesca Arcelli},
	year = {2021},
	keywords = {Technical Debt, Systematic Literature Review, Technical Debt prioritization},
	pages = {110827},
}

@article{samoaa_tep-gnn_2022,
	title = {{TEP}-{GNN}: {Accurate} {Execution} {Time} {Prediction} of {Functional} {Tests} using {Graph} {Neural} {Networks}},
	author = {Samoaa, Peter and Longa, Antonio and Mohamad, Mazen and Haghir Chehreghani, Morteza and Leitner, Philipp},
	month = aug,
	year = {2022},
}

@inproceedings{raychev_learning_2016,
	address = {New York, NY, USA},
	series = {{POPL} '16},
	title = {Learning programs from noisy data},
	isbn = {978-1-4503-3549-2},
	url = {https://doi.org/10.1145/2837614.2837671},
	doi = {10.1145/2837614.2837671},
	abstract = {We present a new approach for learning programs from noisy datasets. Our approach is based on two new concepts: a regularized program generator which produces a candidate program based on a small sample of the entire dataset while avoiding overfitting, and a dataset sampler which carefully samples the dataset by leveraging the candidate program's score on that dataset. The two components are connected in a continuous feedback-directed loop. We show how to apply this approach to two settings: one where the dataset has a bound on the noise, and another without a noise bound. The second setting leads to a new way of performing approximate empirical risk minimization on hypotheses classes formed by a discrete search space. We then present two new kinds of program synthesizers which target the two noise settings. First, we introduce a novel regularized bitstream synthesizer that successfully generates programs even in the presence of incorrect examples. We show that the synthesizer can detect errors in the examples while combating overfitting – a major problem in existing synthesis techniques. We also show how the approach can be used in a setting where the dataset grows dynamically via new examples (e.g., provided by a human). Second, we present a novel technique for constructing statistical code completion systems. These are systems trained on massive datasets of open source programs, also known as “Big Code”. The key idea is to introduce a domain specific language (DSL) over trees and to learn functions in that DSL directly from the dataset. These learned functions then condition the predictions made by the system. This is a flexible and powerful technique which generalizes several existing works as we no longer need to decide a priori on what the prediction should be conditioned (another benefit is that the learned functions are a natural mechanism for explaining the prediction). As a result, our code completion system surpasses the prediction capabilities of existing, hard-wired systems.},
	booktitle = {Proceedings of the 43rd {Annual} {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {Association for Computing Machinery},
	author = {Raychev, Veselin and Bielik, Pavol and Vechev, Martin and Krause, Andreas},
	year = {2016},
	note = {event-place: St. Petersburg, FL, USA},
	keywords = {Anomaly Detection, Big Code, Noisy Data, Program Synthesis, Regularization, Statistical Code Completion},
	pages = {761--774},
}

@article{raychev_learning_2016-1,
	title = {Learning programs from noisy data},
	volume = {51},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/2914770.2837671},
	doi = {10.1145/2914770.2837671},
	number = {1},
	journal = {SIGPLAN Not.},
	author = {Raychev, Veselin and Bielik, Pavol and Vechev, Martin and Krause, Andreas},
	month = jan,
	year = {2016},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Anomaly Detection, Big Code, Noisy Data, Program Synthesis, Regularization, Statistical Code Completion},
	pages = {761--774},
}

@inproceedings{ferreira_campos_mining_2019,
	title = {Mining {Rule} {Violations} in {JavaScript} {Code} {Snippets}},
	doi = {10.1109/MSR.2019.00039},
	booktitle = {2019 {IEEE}/{ACM} 16th {International} {Conference} on {Mining} {Software} {Repositories} ({MSR})},
	author = {Ferreira Campos, Uriel and Smethurst, Guilherme and Moraes, João Pedro and Bonifácio, Rodrigo and Pinto, Gustavo},
	year = {2019},
	keywords = {Encoding, Software, Tools, Best practices, Computer languages, Es-linter, Javascript code snippets, Programming, Rule Violations, Standards},
	pages = {195--199},
}

@inproceedings{baltes_sotorrent_2019,
	series = {{MSR} '19},
	title = {{SOTorrent}: studying the origin, evolution, and usage of stack overflow code snippets},
	url = {https://doi.org/10.1109/MSR.2019.00038},
	doi = {10.1109/MSR.2019.00038},
	booktitle = {Proceedings of the 16th {International} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {IEEE Press},
	author = {Baltes, Sebastian and Treude, Christoph and Diehl, Stephan},
	year = {2019},
	note = {Place: Montreal, Quebec, Canada},
	pages = {191--194},
}

@article{roziere_code_2023,
	title = {Code {Llama}: {Open} {Foundation} {Models} for {Code}},
	volume = {abs/2308.12950},
	url = {https://api.semanticscholar.org/CorpusID:261100919},
	journal = {ArXiv},
	author = {Rozière, Baptiste and Gehring, Jonas and Gloeckle, Fabian and Sootla, Sten and Gat, Itai and Tan, Xiaoqing and Adi, Yossi and Liu, Jingyu and Remez, Tal and Rapin, Jérémy and Kozhevnikov, Artyom and Evtimov, I. and Bitton, Joanna and Bhatt, Manish P. and Ferrer, Cristian Cantón and Grattafiori, Aaron and Xiong, Wenhan and D'efossez, Alexandre and Copet, Jade and Azhar, Faisal and Touvron, Hugo and Martin, Louis and Usunier, Nicolas and Scialom, Thomas and Synnaeve, Gabriel},
	year = {2023},
}

@inproceedings{huang_guiding_2018,
	address = {Gothenburg Sweden},
	title = {Guiding developers to make informative commenting decisions in source code},
	isbn = {978-1-4503-5663-3},
	url = {https://dl.acm.org/doi/10.1145/3183440.3194960},
	doi = {10.1145/3183440.3194960},
	language = {en},
	urldate = {2024-06-23},
	booktitle = {Proceedings of the 40th {International} {Conference} on {Software} {Engineering}: {Companion} {Proceeedings}},
	publisher = {ACM},
	author = {Huang, Yuan and Jia, Nan and Zhou, Qiang and Chen, Xiangping and Xiong, Yingfei and Luo, Xiaonan},
	month = may,
	year = {2018},
	pages = {260--261},
}

@inproceedings{rani_what_2021,
	address = {Luxembourg},
	title = {What {Do} {Developers} {Discuss} about {Code} {Comments}?},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	isbn = {978-1-66544-897-0},
	url = {https://ieeexplore.ieee.org/document/9610635/},
	doi = {10.1109/SCAM52516.2021.00027},
	urldate = {2024-06-23},
	booktitle = {2021 {IEEE} 21st {International} {Working} {Conference} on {Source} {Code} {Analysis} and {Manipulation} ({SCAM})},
	publisher = {IEEE},
	author = {Rani, Pooja and Birrer, Mathias and Panichella, Sebastiano and Ghafari, Mohammad and Nierstrasz, Oscar},
	month = sep,
	year = {2021},
	pages = {153--164},
	file = {Full Text:C\:\\Users\\Tanyalouise\\Zotero\\storage\\RFPA8DPN\\Rani et al. - 2021 - What Do Developers Discuss about Code Comments.pdf:application/pdf},
}

@inproceedings{haouari_how_2011,
	address = {Banff, AB, Canada},
	title = {How {Good} is {Your} {Comment}? {A} {Study} of {Comments} in {Java} {Programs}},
	isbn = {978-1-4577-2203-5 978-0-7695-4604-9},
	shorttitle = {How {Good} is {Your} {Comment}?},
	url = {http://ieeexplore.ieee.org/document/6092562/},
	doi = {10.1109/ESEM.2011.22},
	urldate = {2024-06-23},
	booktitle = {2011 {International} {Symposium} on {Empirical} {Software} {Engineering} and {Measurement}},
	publisher = {IEEE},
	author = {Haouari, Dorsaf and Sahraoui, Houari and Langlais, Philippe},
	month = sep,
	year = {2011},
	pages = {137--146},
}

@inproceedings{hippisley_lexical_1976,
	title={Lexical Analysis},
	author={Hippisley, Andrew},
	booktitle={Handbook of Natural Language Processing},
	year={1976},
	url={https://api.semanticscholar.org/CorpusID:64025642}
}

@article{far_exploration_2016,
  title={An exploration on lexical analysis},
  author={Farhanaaz and V. Sanju},
  journal={2016 International Conference on Electrical, Electronics, and Optimization Techniques (ICEEOT)},
  year={2016},
  pages={253-258},
  url={https://api.semanticscholar.org/CorpusID:11121418}
}

@article{bhat_survey_2022,
author = {Bhat, Spurthi and Bhirud, Rutuja and Bhokare, Vaishnavi},
year = {2022},
month = {09},
pages = {109-115},
title = {Survey on Various Syntax Analyzer Tools},
volume = {10},
journal = {International Journal for Research in Applied Science and Engineering Technology},
doi = {10.22214/ijraset.2022.46588}
}

@inproceedings{lee_syntax_1982,
  title={Syntax Analysis and Parsing Algorithms},
  author={Graham Lee},
  year={1982},
  url={https://api.semanticscholar.org/CorpusID:63301130}
}

@inproceedings{plosch_method_2010,
	address = {Porto, Portugal},
	title = {A {Method} for {Continuous} {Code} {Quality} {Management} {Using} {Static} {Analysis}},
	isbn = {978-1-4244-8539-0},
	url = {http://ieeexplore.ieee.org/document/5655663/},
	doi = {10.1109/QUATIC.2010.68},
	urldate = {2024-06-23},
	booktitle = {2010 {Seventh} {International} {Conference} on the {Quality} of {Information} and {Communications} {Technology}},
	publisher = {IEEE},
	author = {Plosch, Reinhold and Gruber, Harald and Korner, Christian and Saft, Matthias},
	month = sep,
	year = {2010},
	pages = {370--375},
}

@incollection{bartneck_what_2021,
	address = {Cham},
	title = {What {Is} {AI}?},
	isbn = {978-3-030-51109-8 978-3-030-51110-4},
	url = {http://link.springer.com/10.1007/978-3-030-51110-4_2},
	language = {en},
	urldate = {2024-06-23},
	booktitle = {An {Introduction} to {Ethics} in {Robotics} and {AI}},
	publisher = {Springer International Publishing},
	author = {Bartneck, Christoph and Lütge, Christoph and Wagner, Alan and Welsh, Sean},
	collaborator = {Bartneck, Christoph and Lütge, Christoph and Wagner, Alan and Welsh, Sean},
	year = {2021},
	doi = {10.1007/978-3-030-51110-4_2},
	note = {Series Title: SpringerBriefs in Ethics},
	pages = {5--16},
	file = {Full Text:C\:\\Users\\Tanyalouise\\Zotero\\storage\\ECW6IZ9F\\Bartneck et al. - 2021 - What Is AI.pdf:application/pdf},
}

@book{russell_artificial_2016,
	address = {Boston Columbus Indianapolis New York San Francisco Upper Saddle River Amsterdam Cape Town Dubai London Madrid Milan Munich Paris Montreal Toronto Delhi Mexico City Sao Paulo Sydney Hong Kong Seoul Singapore Taipei Tokyo},
	edition = {Third edition, Global edition},
	series = {Prentice {Hall} series in artificial intelligence},
	title = {Artificial intelligence: a modern approach},
	isbn = {978-0-13-207148-2 978-1-292-15396-4},
	shorttitle = {Artificial intelligence},
	language = {eng},
	publisher = {Pearson},
	author = {Russell, Stuart J. and Norvig, Peter},
	collaborator = {Davis, Ernest and Edwards, Douglas},
	year = {2016},
	file = {Table of Contents PDF:C\:\\Users\\Tanyalouise\\Zotero\\storage\\J6GX6EB6\\Russell and Norvig - 2016 - Artificial intelligence a modern approach.pdf:application/pdf},
}

@article{shaveta_review_2023,
	title = {A review on machine learning},
	volume = {9},
	issn = {25828185},
	url = {https://ijsra.net/content/review-machine-learning},
	doi = {10.30574/ijsra.2023.9.1.0410},
	abstract = {Machine learning is a particular branch of artificial intelligence that teaches a machine how to learn, whereas artificial intelligence (AI) is the general science that aims to emulate human abilities. An AI method called machine learning teaches computers to learn from their past experiences. Machine learning algorithms don't rely on a predetermined equation as a model, but instead "learn" information directly from data using computational techniques. As the quantity of learning examples increases, the algorithms adaptively get better at what they do. This paper provides an overview of the field as well as a variety of machine learning approaches, including supervised, unsupervised, and reinforcement learning and various languages used for machine learning.},
	number = {1},
	urldate = {2024-06-23},
	journal = {International Journal of Science and Research Archive},
	author = {{Shaveta}},
	month = may,
	year = {2023},
	pages = {281--285},
	file = {Full Text:C\:\\Users\\Tanyalouise\\Zotero\\storage\\SYH5AD5X\\Shaveta - 2023 - A review on machine learning.pdf:application/pdf},
}

@article{jiang_supervised_2020,
	title = {Supervised {Machine} {Learning}: {A} {Brief} {Primer}},
	volume = {51},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {00057894},
	shorttitle = {Supervised {Machine} {Learning}},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0005789420300678},
	doi = {10.1016/j.beth.2020.05.002},
	language = {en},
	number = {5},
	urldate = {2024-06-23},
	journal = {Behavior Therapy},
	author = {Jiang, Tammy and Gradus, Jaimie L. and Rosellini, Anthony J.},
	month = sep,
	year = {2020},
	pages = {675--687},
	file = {Accepted Version:C\:\\Users\\Tanyalouise\\Zotero\\storage\\IC6W4WWL\\Jiang et al. - 2020 - Supervised Machine Learning A Brief Primer.pdf:application/pdf},
}

@article{alzubi_machine_2018,
	title = {Machine {Learning} from {Theory} to {Algorithms}: {An} {Overview}},
	volume = {1142},
	copyright = {http://iopscience.iop.org/info/page/text-and-data-mining},
	issn = {1742-6588, 1742-6596},
	shorttitle = {Machine {Learning} from {Theory} to {Algorithms}},
	url = {https://iopscience.iop.org/article/10.1088/1742-6596/1142/1/012012},
	doi = {10.1088/1742-6596/1142/1/012012},
	urldate = {2024-06-23},
	journal = {Journal of Physics: Conference Series},
	author = {Alzubi, Jafar and Nayyar, Anand and Kumar, Akshi},
	month = nov,
	year = {2018},
	pages = {012012},
}

@article{alzubaidi_review_2021,
	title = {Review of deep learning: concepts, {CNN} architectures, challenges, applications, future directions},
	volume = {8},
	issn = {2196-1115},
	shorttitle = {Review of deep learning},
	url = {https://journalofbigdata.springeropen.com/articles/10.1186/s40537-021-00444-8},
	doi = {10.1186/s40537-021-00444-8},
	abstract = {Abstract
            In the last few years, the deep learning (DL) computing paradigm has been deemed the Gold Standard in the machine learning (ML) community. Moreover, it has gradually become the most widely used computational approach in the field of ML, thus achieving outstanding results on several complex cognitive tasks, matching or even beating those provided by human performance. One of the benefits of DL is the ability to learn massive amounts of data. The DL field has grown fast in the last few years and it has been extensively used to successfully address a wide range of traditional applications. More importantly, DL has outperformed well-known ML techniques in many domains, e.g., cybersecurity, natural language processing, bioinformatics, robotics and control, and medical information processing, among many others. Despite it has been contributed several works reviewing the State-of-the-Art on DL, all of them only tackled one aspect of the DL, which leads to an overall lack of knowledge about it. Therefore, in this contribution, we propose using a more holistic approach in order to provide a more suitable starting point from which to develop a full understanding of DL. Specifically, this review attempts to provide a more comprehensive survey of the most important aspects of DL and including those enhancements recently added to the field. In particular, this paper outlines the importance of DL, presents the types of DL techniques and networks. It then presents convolutional neural networks (CNNs) which the most utilized DL network type and describes the development of CNNs architectures together with their main features, e.g., starting with the AlexNet network and closing with the High-Resolution network (HR.Net). Finally, we further present the challenges and suggested solutions to help researchers understand the existing research gaps. It is followed by a list of the major DL applications. Computational tools including FPGA, GPU, and CPU are summarized along with a description of their influence on DL. The paper ends with the evolution matrix, benchmark datasets, and summary and conclusion.},
	language = {en},
	number = {1},
	urldate = {2024-06-23},
	journal = {Journal of Big Data},
	author = {Alzubaidi, Laith and Zhang, Jinglan and Humaidi, Amjad J. and Al-Dujaili, Ayad and Duan, Ye and Al-Shamma, Omran and Santamaría, J. and Fadhel, Mohammed A. and Al-Amidie, Muthana and Farhan, Laith},
	month = mar,
	year = {2021},
	pages = {53},
	file = {Full Text:C\:\\Users\\Tanyalouise\\Zotero\\storage\\6E2FN72D\\Alzubaidi et al. - 2021 - Review of deep learning concepts, CNN architectur.pdf:application/pdf},
}

@article{xue_unlocking_2024,
	title = {Unlocking the potential: {A} comprehensive exploration of large language models in natural language processing},
	volume = {57},
	issn = {2755-2721, 2755-273X},
	shorttitle = {Unlocking the potential},
	url = {https://ace.ewapublishing.org/article/794794a244c94d51b5734ec7f31b7cbc},
	doi = {10.54254/2755-2721/57/20241341},
	abstract = {In recent years, large language models (LLMs) have revolutionized natural language processing (NLP) with their transformative architectures and sophisticated training techniques. This paper provides a comprehensive overview of LLMs, focusing on their architecture, training methodologies, and diverse applications. We delve into the transformer architecture, attention mechanisms, and parameter tuning strategies that underpin LLMs' capabilities. Furthermore, we explore training techniques such as self-supervised learning, transfer learning, and curriculum learning, highlighting their roles in empowering LLMs with linguistic proficiency. Additionally, we discuss the wide-ranging applications of LLMs, including text generation, sentiment analysis, and question answering, showcasing their versatility and impact across various domains. Through this comprehensive examination, we aim to elucidate the advancements and potentials of LLMs in shaping the future of natural language understanding and generation.},
	number = {1},
	urldate = {2024-06-23},
	journal = {Applied and Computational Engineering},
	author = {Xue, Qing},
	month = apr,
	year = {2024},
	pages = {247--252},
}

@misc{samoaa_tep-gnn_2022-1,
	title = {{TEP}-{GNN}: {Accurate} {Execution} {Time} {Prediction} of {Functional} {Tests} using {Graph} {Neural} {Networks}},
	copyright = {Creative Commons Attribution 4.0 International},
	shorttitle = {{TEP}-{GNN}},
	url = {https://arxiv.org/abs/2208.11947},
	doi = {10.48550/ARXIV.2208.11947},
	abstract = {Predicting the performance of production code prior to actually executing or benchmarking it is known to be highly challenging. In this paper, we propose a predictive model, dubbed TEP-GNN, which demonstrates that high-accuracy performance prediction is possible for the special case of predicting unit test execution times. TEP-GNN uses FA-ASTs, or flow-augmented ASTs, as a graph-based code representation approach, and predicts test execution times using a powerful graph neural network (GNN) deep learning model. We evaluate TEP-GNN using four real-life Java open source programs, based on 922 test files mined from the projects' public repositories. We find that our approach achieves a high Pearson correlation of 0.789, considerable outperforming a baseline deep learning model. However, we also find that more work is needed for trained models to generalize to unseen projects. Our work demonstrates that FA-ASTs and GNNs are a feasible approach for predicting absolute performance values, and serves as an important intermediary step towards being able to predict the performance of arbitrary code prior to execution.},
	urldate = {2024-06-23},
	publisher = {arXiv},
	author = {Samoaa, Hazem Peter and Longa, Antonio and Mohamad, Mazen and Chehreghani, Morteza Haghir and Leitner, Philipp},
	year = {2022},
	note = {Version Number: 1},
	keywords = {Artificial Intelligence (cs.AI), FOS: Computer and information sciences, Software Engineering (cs.SE)},
}

@inproceedings{blau_frenchpress_2015,
	address = {Vilnius Lithuania},
	title = {{FrenchPress} {Gives} {Students} {Automated} {Feedback} on {Java} {Program} {Flaws}},
	isbn = {978-1-4503-3440-2},
	url = {https://dl.acm.org/doi/10.1145/2729094.2742622},
	doi = {10.1145/2729094.2742622},
	language = {en},
	urldate = {2024-06-25},
	booktitle = {Proceedings of the 2015 {ACM} {Conference} on {Innovation} and {Technology} in {Computer} {Science} {Education}},
	publisher = {ACM},
	author = {Blau, Hannah and Moss, J. Eliot B.},
	month = jun,
	year = {2015},
	pages = {15--20},
}

@incollection{dingel_parsing_2014,
	address = {Cham},
	title = {Parsing in a {Broad} {Sense}},
	volume = {8767},
	isbn = {978-3-319-11652-5 978-3-319-11653-2},
	url = {https://link.springer.com/10.1007/978-3-319-11653-2_4},
	language = {en},
	urldate = {2024-06-26},
	booktitle = {Model-{Driven} {Engineering} {Languages} and {Systems}},
	publisher = {Springer International Publishing},
	author = {Zaytsev, Vadim and Bagge, Anya Helene},
	editor = {Dingel, Juergen and Schulte, Wolfram and Ramos, Isidro and Abrahão, Silvia and Insfran, Emilio},
	year = {2014},
	doi = {10.1007/978-3-319-11653-2_4},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {50--67},
	file = {Accepted Version:C\:\\Users\\Tanyalouise\\Zotero\\storage\\EZSGN3DS\\Zaytsev and Bagge - 2014 - Parsing in a Broad Sense.pdf:application/pdf},
}
