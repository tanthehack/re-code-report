@book{buschmann_1996_patternoriented,
  author = {Buschmann, Frank and Schmidt, Douglas C and Kircher, Michael},
  publisher = {Wiley},
  title = {Pattern-oriented software architecture},
  year = {1996}
}

@article{shepperd_1988_a,
  author = {Shepperd, Martin},
  pages = {30},
  title = {A critique of cyclomatic complexity as a software metric},
  doi = {10.1049/sej.1988.0003},
  volume = {3},
  year = {1988},
  journal = {Software Engineering Journal}
}

@article{bancroft_2006_program,
  author = {Bancroft, Peter and Roe, Paul},
  month = {01},
  pages = {19-23},
  title = {Program annotations: Feedback for students learning to program},
  urldate = {2024-04-01},
  year = {2006},
  journal = {}
}

@inproceedings{sadowski_mordern,
author = {Sadowski, Caitlin and S\"{o}derberg, Emma and Church, Luke and Sipko, Michal and Bacchelli, Alberto},
title = {Modern code review: a case study at google},
year = {2018},
isbn = {9781450356596},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3183519.3183525},
doi = {10.1145/3183519.3183525},
abstract = {Employing lightweight, tool-based code review of code changes (aka modern code review) has become the norm for a wide variety of open-source and industrial systems. In this paper, we make an exploratory investigation of modern code review at Google. Google introduced code review early on and evolved it over the years; our study sheds light on why Google introduced this practice and analyzes its current status, after the process has been refined through decades of code changes and millions of code reviews. By means of 12 interviews, a survey with 44 respondents, and the analysis of review logs for 9 million reviewed changes, we investigate motivations behind code review at Google, current practices, and developers' satisfaction and challenges.},
booktitle = {Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice},
pages = {181–190},
numpages = {10},
location = {Gothenburg, Sweden},
series = {ICSE-SEIP '18}
}

@article{kourie_2008_reflections,
  author = {Kourie, Derrick G and Pieterse, Vreda},
  month = {01},
  pages = {29-37},
  publisher = {South African Institute of Computer Scientists and Information Technologists},
  title = {Reflections on coding standards in tertiary computer science education},
  urldate = {2024-04-01},
  volume = {41},
  year = {2008},
  journal = {South African Computer Journal}
}

@misc{smit_2011_code,
  author = {Smit, Michael and Gergel, Barry and Hoover, H. James and Stroulia, Eleni},
  month = {09},
  pages = {504–507},
  title = {Code convention adherence in evolving software},
  doi = {10.1109/ICSM.2011.6080819},
  url = {https://ieeexplore.ieee.org/abstract/document/6080819/},
  urldate = {2023-09-14},
  year = {2011},
  organization = {IEEE Xplore}
}

@article{rodrigues_2019_towards,
  author = {Rodrigues, Elder and Montecchi, Leonardo},
  month = {12},
  title = {Towards a structured specification of coding conventions},
  doi = {10.1109/prdc47002.2019.00047},
  urldate = {2024-04-02},
  year = {2019},
  journal = {}
}

@book{pressman_2014_software,
  author = {Pressman, Roger S and Maxim, Bruce R},
  publisher = {Mcgraw-Hill Education},
  title = {Software engineering : a practitioner's approach},
  year = {2014}
}

@article{pratap_2023_the,
  author = {Pratap, Prathamesh},
  month = {10},
  pages = {69-76},
  publisher = {Shivkrupa Publication's},
  title = {The evolution of computer programming languages},
  doi = {10.48175/ijarsct-13110},
  urldate = {2024-04-02},
  volume = {3},
  year = {2023},
  journal = {International Journal of Advanced Research in Science, Communication and Technology}
}

@book{barron_1972_structured,
  author = {Barron, D. W.},
  pages = {314-315},
  title = {Structured Programming, O.-J. Dahl, E. W. Dijkstra and C. A. R. Hoare, Academic Press, London, },
  doi = {10.1002/spe.4380050313},
  urldate = {2022-10-06},
  volume = {5},
  year = {1972},
  organization = {Software: Practice and Experience}
}

@misc{michael_2015_the,
  author = {Medoff, Michael},
  month = {06},
  title = {The evolution of coding standards},
  url = {https://www.exida.com/Blog/the-evolution-of-coding-standards},
  urldate = {2024-04-02},
  year = {2015},
  organization = {www.exida.com}
}

@article{chen_2018_an,
  author = {Chen, Hsi-Min and Chen, W.-H and Lee, C.-C},
  month = {09},
  pages = {1203-1221},
  title = {An automated assessment system for analysis of coding convention violations in Java programming assignments*},
  doi = {10.6688/JISE.201809_34(5).0006},
  volume = {34},
  year = {2018},
  journal = {Journal of Information Science and Engineering}
}

@book{dijkstra_1972_structured,
  author = {Dijkstra, E. W. and Dahl, O. J and Hoare, C. A. R.},
  publisher = {Academic Press Ltd.},
  title = {Structured programming},
  year = {1972}
}

@article{wiese_2017_teaching,
  author = {Wiese, Eliane S. and Yen, Michael and Chen, Antares and Santos, Lucas A. and Fox, Armando},
  month = {04},
  title = {Teaching students to recognize and implement good coding style},
  doi = {10.1145/3051457.3051469},
  year = {2017},
  journal = {Proceedings of the Fourth (2017) ACM Conference on Learning}
}

@inproceedings{keuing_tutoring,
author = {Keuning, Hieke and Heeren, Bastiaan and Jeuring, Johan},
title = {A Tutoring System to Learn Code Refactoring},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432526},
doi = {10.1145/3408877.3432526},
abstract = {In the last few decades, numerous tutoring systems and assessment tools have been developed to support students with learning programming, giving hints on correcting errors, showing which test cases do not succeed, and grading their overall solutions. The focus has been less on helping students write code with good style and quality. There are several professional tools that can help, but they are not targeted at novice programmers.This paper describes a tutoring system that lets students practice with improving small programs that are already functionally correct. The system is based on rules that are extracted from input by teachers collected in a preliminary study, a subset of rules taken from professional tools, and other literature. Rules define how a code construct can be rewritten into a better variant, without changing its functionality. Rules can be combined to form rewrite strategies, similar to refactorings offered by most IDEs. The student can ask for hints and feedback at each step.We describe the design of the system, show example sessions, and evaluate and discuss its contribution and limitations.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {562–568},
numpages = {7},
keywords = {code quality, learning programming, refactoring, tutoring systems},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{kim_automated_code,
author = {Kim, Hyungjin and Kwon, Yonghwi and Joh, Sangwoo and Kwon, Hyukin and Ryou, Yeonhee and Kim, Taeksu},
title = {Understanding automated code review process and developer experience in industry},
year = {2022},
isbn = {9781450394130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3540250.3558950},
doi = {10.1145/3540250.3558950},
booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1398–1407},
numpages = {10},
keywords = {static analysis, review bot, code review automation, code review},
location = {<conf-loc>, <city>Singapore</city>, <country>Singapore</country>, </conf-loc>},
series = {ESEC/FSE 2022}
}

@inproceedings{wessel_github,
author = {Wessel, Mairieli and Serebrenik, Alexander and Wiese, Igor and Steinmacher, Igor and Gerosa, Marco A.},
title = {What to Expect from Code Review Bots on GitHub? A Survey with OSS Maintainers},
year = {2020},
isbn = {9781450387538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3422392.3422459},
doi = {10.1145/3422392.3422459},
abstract = {Software bots are used by Open Source Software (OSS) projects to streamline the code review process. Interfacing between developers and automated services, code review bots report continuous integration failures, code quality checks, and code coverage. However, the impact of such bots on maintenance tasks is still neglected. In this paper, we study how project maintainers experience code review bots. We surveyed 127 maintainers and asked about their expectations and perception of changes incurred by code review bots. Our findings reveal that the most frequent expectations include enhancing the feedback bots provide to developers, reducing the maintenance burden for developers, and enforcing code coverage. While maintainers report that bots satisfied their expectations, they also perceived unexpected effects, such as communication noise and newcomers' dropout. Based on these results, we provide a series of implications for bot developers, as well as insights for future research.},
booktitle = {Proceedings of the XXXIV Brazilian Symposium on Software Engineering},
pages = {457–462},
numpages = {6},
keywords = {code review, open source software, pull-based model, software bots},
location = {<conf-loc>, <city>Natal</city>, <country>Brazil</country>, </conf-loc>},
series = {SBES '20}
}

@article{bada_modern,
author = {Badampudi, Deepika and Unterkalmsteiner, Michael and Britto, Ricardo},
title = {Modern Code Reviews—Survey of Literature and Practice},
year = {2023},
issue_date = {July 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {32},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/3585004},
doi = {10.1145/3585004},
abstract = {Background: Modern Code Review (MCR) is a lightweight alternative to traditional code inspections. While secondary studies on MCR exist, it is uanknown whether the research community has targeted themes that practitioners consider important.Objectives: The objectives are to provide an overview of MCR research, analyze the practitioners’ opinions on the importance of MCR research, investigate the alignment between research and practice, and propose future MCR research avenues.Method: We conducted a systematic mapping study to survey state of the art until and including 2021, employed the Q-Methodology to analyze the practitioners’ perception of the relevance of MCR research, and analyzed the primary studies’ research impact.Results: We analyzed 244 primary studies, resulting in five themes. As a result of the 1,300 survey data points, we found that the respondents are positive about research investigating the impact of MCR on product quality and MCR process properties. In contrast, they are negative about human factor– and support systems–related research.Conclusion: These results indicate a misalignment between the state of the art and the themes deemed important by most survey respondents. Researchers should focus on solutions that can improve the state of MCR practice. We provide an MCR research agenda that can potentially increase the impact of MCR research.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {may},
articleno = {107},
numpages = {61},
keywords = {practitioner survey, literature survey, Modern code review}
}

@article{joni_discourse,
author = {Joni, Saj-Nicole and Soloway, Elliot},
year = {1986},
month = {02},
pages = {},
title = {But My Program Runs! Discourse Rules for Novice Programmers},
volume = {2},
journal = {Journal of Educational Computing Research},
doi = {10.2190/6E5W-AR7C-NX76-HUT2}
}

@inproceedings{temp_semnatic,
author = {Ruvo, Giuseppe and Tempero, Ewan and Luxton-Reilly, Andrew and Rowe, Gerard and Giacaman, Nasser},
year = {2018},
month = {01},
pages = {73-82},
title = {Understanding semantic style by analysing student code},
doi = {10.1145/3160489.3160500}
}

@inproceedings{marko_benefits,
author = {Popić, Srđan and Velikic, Gordana and Jaroslav, Hlavač and Spasic, Zvjezdan and Vulić, Marko},
year = {2018},
month = {11},
pages = {},
title = {The Benefits of the Coding Standards Enforcement and its Impact on the Developers Coding Behaviour-A Case Study on Two Small Projects},
doi = {10.1109/TELFOR.2018.8612149}
}

@article {digkas_td,
author = {G. Digkas and A. Chatzigeorgiou and A. Ampatzoglou and P. Avgeriou},
journal = {IEEE Transactions on Software Engineering},
title = {Can Clean New Code Reduce Technical Debt Density?},
year = {2022},
volume = {48},
number = {05},
issn = {1939-3520},
pages = {1705-1721},
abstract = {While technical debt grows in absolute numbers as software systems evolve over time, the density of technical debt (technical debt divided by lines of code) is reduced in some cases. This can be explained by either the application of refactorings or the development of new artifacts with limited Technical Debt. In this paper we explore the second explanation, by investigating the relation between the amount of Technical Debt in new code and the evolution of Technical Debt in the system. To this end, we compare the Technical Debt Density of new code with existing code, and we investigate which of the three major types of code changes (additions, deletions and modifications) is primarily responsible for changes in the evolution of Technical Debt density. Furthermore, we study whether there is a relation between code quality practices and the ‘cleanness’ of new code. To obtain the required data, we have performed a large-scale case study on twenty-seven open-source software projects by the Apache Software Foundation, analyzing 66,661 classes and 56,890 commits. The results suggest that writing “clean” (or at least “cleaner”) new code can be an efficient strategy for reducing Technical Debt Density, and thus preventing software decay over time. The findings also suggest that projects adopting an explicit policy for quality improvement, e.g., through discussions on code quality in board meetings, are associated with a higher frequency of cleaner new code commits. Therefore, we champion the establishment of processes that monitor the density of Technical Debt of new code to control the accumulation of Technical Debt in a software system.},
keywords = {open source software;writing;logic gates;market research;monitoring;maintenance engineering},
doi = {10.1109/TSE.2020.3032557},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {may}
}

@inproceedings{han_rem,
  author={Han, DongGyun and Ragkhitwetsagul, Chaiyong and Krinke, Jens and Paixao, Matheus and Rosa, Giovanni},
  booktitle={2020 IEEE 20th International Working Conference on Source Code Analysis and Manipulation (SCAM)}, 
  title={Does code review really remove coding convention violations?}, 
  year={2020},
  volume={},
  number={},
  pages={43-53},
  keywords={Conferences;Manuals;Tools;Inspection;Encoding;Software;code review;coding conventions;coding style},
  doi={10.1109/SCAM51674.2020.00010}}

@misc{hartford_dolphin,
  author = {Hartford, Eric},
  month = {12},
  publisher = {Cognitive Computations},
  title = {dolphin-mixtral-8x7b},
  url = {https://erichartford.com/dolphin-25-mixtral-8x7b},
  urldate = {2024-04-03},
  year = {2023},
  organization = {Cognitive Computations}
}

@misc{id_2023,
  author = {InstituteData},
  month = {10},
  title = {Understanding coding conventions in software engineering | institute of data},
  url = {https://www.institutedata.com/blog/software-engineering-coding-conventions/},
  year = {2023},
  organization = {Institute of Data}
}

@book{beck_xp,
  added-at = {2006-08-14T14:44:12.000+0200},
  author = {Beck, Kent},
  biburl = {https://www.bibsonomy.org/bibtex/28d2b2ef882d4d24791e6c4b9f9786594/cschneid},
  interhash = {7c4fd92b66f0d7b8f140ca3f1cb621ec},
  intrahash = {8d2b2ef882d4d24791e6c4b9f9786594},
  keywords = {extreme programming beck},
  publisher = {Addison-Wesley Publishing Company},
  timestamp = {2006-08-14T14:44:12.000+0200},
  title = {{Extreme Programming Explained: Embrace Change}},
  year = 1999
}

@misc{google,
  author={Google},
  title = {Google javascript style guide},
  url = {https://google.github.io/styleguide/jsguide.html},
  organization = {google.github.io}
}

@book{meyer_obj,
author = {Meyer, Bertrand},
title = {Object-oriented software construction (2nd ed.)},
year = {1997},
isbn = {0136291554},
publisher = {Prentice-Hall, Inc.},
address = {USA}
}

@misc{vanrossum_2001_pep,
  author = {van Rossum, Guido and Warsaw, Barry and Coghlan, Nick},
  month = {07},
  title = {PEP 8 – Style Guide for Python Code | peps.python.org},
  url = {https://peps.python.org/pep-0008/},
  year = {2001},
  organization = {peps.python.org}
}

@book{kernighan_c,
author = {Kernighan, B. W. and Ritchie, D. M.},
title = {The C programming language},
year = {1978},
isbn = {0131101633},
publisher = {Prentice-Hall, Inc.},
address = {USA}
}

@misc{ wiki_name,
    author = "{Wikipedia contributors}",
    title = "Naming convention (programming) --- {Wikipedia}{,} The Free Encyclopedia",
    year = "2024",
    url = "https://en.wikipedia.org/w/index.php?title=Naming_convention_(programming)&oldid=1196522046",
    note = "[Online; accessed 3-April-2024]"
  }

@misc{pugh_2018,
  author = {Pugh, Dean},
  month = {03},
  title = {A brief list of programming naming conventions},
  url = {https://www.deanpugh.com/a-brief-list-of-programming-naming-conventions},
  urldate = {2024-04-03},
  year = {2018},
  organization = {deanpugh.com}
}

@misc{piater_2005_formatting,
  author = {Piater, Justus},
  month = {01},
  title = {Formatting},
  url = {https://iis.uibk.ac.at/public/piater/courses/Coding-Style/ar01s03.html},
  urldate = {2024-04-03},
  year = {2005},
  organization = {iis.uibk.ac.at}
}

@misc{broad,
  author = "{Broad Research Communication Lab}",
  title = {Coding and comment style : Broad institute of MIT and harvard},
  url = {https://mitcommlab.mit.edu/broad/commkit/coding-and-comment-style/},
  organization = {mitcommlab.mit.edu}
}

@misc{herka_naming,
  author = {Herka, Iwo},
  month = {02},
  title = {Naming conventions in programming – a review of scientific literature — Makimo – Consultancy & Software Development Services},
  url = {https://makimo.com/blog/scientific-perspective-on-naming-in-programming/},
  year = {2022},
  organization = {makimo.com}
}

@inproceedings{tufano_smells,
  author={Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Oliveto, Rocco and Di Penta, Massimiliano and De Lucia, Andrea and Poshyvanyk, Denys},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering}, 
  title={When and Why Your Code Starts to Smell Bad}, 
  year={2015},
  volume={1},
  number={},
  pages={403-414},
  keywords={Measurement;Software;Ecosystems;History;Androids;Humanoid robots;Maintenance engineering;bad code smells;mining software repositories;empirical study},
  doi={10.1109/ICSE.2015.59}}

  @article{verma_smells,
author = {Verma, Renu and Kumar, Kuldeep and Verma, Harsh K.},
title = {Code smell prioritization in object-oriented software systems: A systematic literature review},
journal = {Journal of Software: Evolution and Process},
volume = {35},
number = {12},
pages = {e2536},
keywords = {code smell, object-oriented system, prioritization, systematic literature review},
doi = {https://doi.org/10.1002/smr.2536},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2536},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.2536},
abstract = {Abstract Code smells indicate poor design and imperfection in coding style. They increase maintenance costs and degrade software quality. Detecting and mitigating these code smells reduce the effects of flaws present in the software design. However, to save time and effort, it is a good practice to prioritize critical code smells and resolve them first. There have been various empirical studies on code smell prioritization in the last decades. Although the research community has been continuously working on the prioritization of code smells, yet a systematic mapping of all these studies would provide a panorama of research work. With this motivation, we selected 39 primary studies published between May 2011 and May 2022 and classified them based on seven factors: (i) code smells, (ii) factors, (iii) evaluation techniques, (iv) tools, (v) ranking formulas, (vi) data sets used, and (vii) measurements used for validating the research work. This paper aims to outline and discuss the prioritization procedure for code smells in object-oriented software systems. The issues and recommendations for every question act as input for the researchers and industrialists for further research. Some issues for further investigation are less coverage of architecture smells, limited ranking formulas, lack of automated evaluation techniques, and so forth.},
year = {2023}
}

@article{pandey,
title = {A Framework for Producing Effective and Efficient Secure Code through Malware Analysis},
journal = {International Journal of Advanced Computer Science and Applications},
doi = {10.14569/IJACSA.2020.0110263},
url = {http://dx.doi.org/10.14569/IJACSA.2020.0110263},
year = {2020},
publisher = {The Science and Information Organization},
volume = {11},
number = {2},
author = {Abhishek Kumar Pandey and Ashutosh Tripathi and Mamdouh Alenezi and Alka Agrawal and Rajeev Kumar and Raees Ahmad Khan}
}

@inproceedings{keuning_quality,
author = {Keuning, Hieke and Jeuring, Johan and Heeren, Bastiaan},
title = {A Systematic Mapping Study of Code Quality in Education},
year = {2023},
isbn = {9798400701382},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587102.3588777},
doi = {10.1145/3587102.3588777},
abstract = {While functionality and correctness of code has traditionally been the main focus of computing educators, quality aspects of code are getting increasingly more attention. High-quality code contributes to the maintainability of software systems, and should therefore be a central aspect of computing education. We have conducted a systematic mapping study to give a broad overview of the research conducted in the field of code quality in an educational context. The study investigates paper characteristics, topics, research methods, and the targeted programming languages. We found 195 publications (1976-2022) on the topic in multiple databases, which we systematically coded to answer the research questions. This paper reports on the results and identifies developments, trends, and new opportunities for research in the field of code quality in computing education.},
booktitle = {Proceedings of the 2023 Conference on Innovation and Technology in Computer Science Education V. 1},
pages = {5–11},
numpages = {7},
keywords = {code quality, code smells, programming education, refactoring, software engineering education, systematic mapping study},
location = {<conf-loc>, <city>Turku</city>, <country>Finland</country>, </conf-loc>},
series = {ITiCSE 2023}
}

@inproceedings{stegeman,
author = {Stegeman, Martijn and Barendsen, Erik and Smetsers, Sjaak},
title = {Designing a rubric for feedback on code quality in programming courses},
year = {2016},
isbn = {9781450347709},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2999541.2999555},
doi = {10.1145/2999541.2999555},
abstract = {We investigate how to create a rubric that can be used to give feedback on code quality to students in introductory programming courses. Based on an existing model of code quality and a set of preliminary design rules, we constructed a rubric and put it through several design iterations. Each iteration focused on different aspects of the rubric, and solutions to various programming assignments were used to evaluate. The rubric appears to be complete for the assignments it was tested on. We articulate additional design aspects that can be used when drafting new feedback rubrics for programming courses.},
booktitle = {Proceedings of the 16th Koli Calling International Conference on Computing Education Research},
pages = {160–164},
numpages = {5},
keywords = {rubrics, programming education, feedback, code quality, assessment},
location = {Koli, Finland},
series = {Koli Calling '16}
}

@book{fowler_refac,
  added-at = {2007-09-26T23:42:13.000+0200},
  address = {Boston, MA, USA},
  author = {Fowler, Martin},
  biburl = {https://www.bibsonomy.org/bibtex/27151885e8b8528651e048242f3527132/kimmens},
  description = {AOEvolutionchapter short paper},
  interhash = {955b704413985c65e6a0ba497d70b00e},
  intrahash = {7151885e8b8528651e048242f3527132},
  isbn = {0-201-48567-2},
  keywords = {evolution refactoring software},
  publisher = {Addison-Wesley},
  timestamp = {2007-09-26T23:42:13.000+0200},
  title = {Refactoring: Improving the Design of Existing Code},
  year = 1999
}

@misc{reynolds_2022_code,
  author = {Reynolds, Justin},
  month = {05},
  title = {Code smells: What are they and how can I prevent them?},
  url = {https://linearb.io/blog/what-is-a-code-smell},
  year = {2022},
  organization = {linearb.io}
}

@article{sas_trade,
author = {Sas, Darius and Avgeriou, Paris},
title = {Quality attribute trade-offs in the embedded systems industry: an exploratory case study},
year = {2020},
issue_date = {Jun 2020},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {28},
number = {2},
issn = {0963-9314},
url = {https://doi.org/10.1007/s11219-019-09478-x},
doi = {10.1007/s11219-019-09478-x},
abstract = {The embedded systems domain has grown exponentially over the past years. The industry is forced by the market to rapidly improve and release new products to beat the competition. Frenetic development rhythms thus shape this domain and give rise to several new challenges for software design and development. One of them is dealing with trade-offs between run-time and design-time quality attributes. To study practices, processes and tools concerning the management of run-time and design-time quality attributes as well as the trade-offs among them from the perspective of embedded systems software engineers. An exploratory case study with two qualitative data collection steps, namely interviews and a focus group, involving six different companies from the embedded systems domain with a total of twenty participants. The interviewed subjects showed a preference for run-time over design-time qualities. Trade-offs between design-time and run-time qualities are very common, but they are often implicit, due to the lack of adequate monitoring tools and practices. Practitioners prefer to deal with trade-offs in the most lightweight way possible, by applying ad-hoc practices, thus avoiding any overhead incurred. Finally, practitioners have elaborated on how they envision the ideal tool support for dealing with trade-offs. Although it is notoriously difficult to deal with trade-offs, constantly monitoring the quality attributes of interest with automated tools is key in making explicit and prudent trade-offs and mitigating the risk of incurring technical debt.},
journal = {Software Quality Journal},
month = {jun},
pages = {505–534},
numpages = {30},
keywords = {Empirical study, Trade-off, Dependability, Energy efficiency, Technical debt, Embedded systems}
}


@article{alb_detect,
AUTHOR = {Albuquerque, Danyllo and Guimarães, Everton and Perkusich, Mirko and Almeida, Hyggo and Perkusich, Angelo},
TITLE = {Integrating Interactive Detection of Code Smells into Scrum: Feasibility, Benefits, and Challenges},
JOURNAL = {Applied Sciences},
VOLUME = {13},
YEAR = {2023},
NUMBER = {15},
ARTICLE-NUMBER = {8770},
URL = {https://www.mdpi.com/2076-3417/13/15/8770},
ISSN = {2076-3417},
ABSTRACT = {(Context) Code smells indicate poor coding practices or design flaws, suggesting deeper software quality issues. While addressing code smells promptly improves software quality, traditional detection techniques often fail in continuous detection during software development. (Problem Statement) More recently, Interactive Detection (ID) technique has been proposed, enabling the detection of code smells continuously. Although the use of this technique by developers and organizations is promising, there are no practical recommendations for its use in the context of software development. (Goal) The objective of this study was to propose and evaluate the integration of ID into the widely adopted Scrum framework for agile software development. (Method) To achieve this objective, we utilized a mixed-method approach that combined a comprehensive literature review and expert knowledge to propose the integration. Furthermore, we conducted a focus group and a controlled experiment involving software development activities to evaluate this integration. (Results) The findings revealed that this integration significantly benefitted software development, such as early detection of code smells, increased effectiveness in code smell detection, and improved code quality. These findings shed light on the potential benefits of adopting this integration, offering valuable insights for developers and researchers. (Conclusions) This research emphasized the importance of continuous code smell detection as an integral part of agile development and opened avenues for further research in code quality management within agile methodologies.},
DOI = {10.3390/app13158770}
}

@misc{sonar_what,
  author = "{Sonar Source}",
  title = {What is code quality? Definition guide},
  url = {https://www.sonarsource.com/learn/code-quality/},
  organization = {www.sonarsource.com}
}

@article{ling_and,
  author = {Fan, Lingling and Su, Ting and Chen, Sen and Meng, Guozhu and Liu, Yang and Xu, Lihua and Pu, Geguang},
title = {Efficiently manifesting asynchronous programming errors in Android apps},
year = {2018},
isbn = {9781450359375},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3238147.3238170},
doi = {10.1145/3238147.3238170},
booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
pages = {486–497},
numpages = {12},
keywords = {Android, Asynchronous programming error, static analysis, testing},
location = {Montpellier, France},
series = {ASE '18}
}

@article{bacchelli_2013,
  title={Expectations, outcomes, and challenges of modern code review},
  author={Alberto Bacchelli, Christian Bird},
  journal={2013 35th International Conference on Software Engineering (ICSE)},
  year={2013},
  pages={712-721},
  url={https://api.semanticscholar.org/CorpusID:220663293}
}

@article{core_2019,
  title={CORE: Automating Review Recommendation for Code Changes},
  author={J. Siow, Cuiyun Gao, Lingling Fan, Sen Chen, Yang Liu},
  journal={2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  year={2019},
  pages={284-295},
  url={https://api.semanticscholar.org/CorpusID:209439473}
}

@article{balachandran_2013,
  title={Reducing human effort and improving quality in peer code reviews using automatic static analysis and reviewer recommendation},
  author={Vipin Balachandran},
  journal={2013 35th International Conference on Software Engineering (ICSE)},
  year={2013},
  pages={931-940},
  url={https://api.semanticscholar.org/CorpusID:15823436}
}

@inproceedings{gupta_2018,
  title={Intelligent code reviews using deep learning},
  author={Anshul Gupta},
  year={2018},
  url={https://api.semanticscholar.org/CorpusID:52219239}
}

@inproceedings{bielik_2017,
author = {Bielik, Pavol and Raychev, Veselin and Vechev, Martin},
year = {2017},
month = {07},
pages = {233-253},
title = {Learning a Static Analyzer from Data},
isbn = {978-3-319-63386-2},
doi = {10.1007/978-3-319-63387-9_12}
}

@inproceedings{ilyas_2016,
  title={Static Code Analysis: A Systematic Literature Review and an Industrial Survey},
  author={Bilal Ilyas and Islam Elkhalifa},
  year={2016},
  url={https://api.semanticscholar.org/CorpusID:65258085}
}

@book{moller_2020,
  title = {Static Program Analysis},
  author = {Anders Møller and Michael I. Schwartzbach},
  year = {2020},
  month = {November},
  url = {https://cs.au.dk/~amoeller/spa/},
  researchr = {https://researchr.org/publication/MoellerS20},
  cites = {0},
  citedby = {0},
  organization = {Department of Computer Science, Aarhus University},
}

@inproceedings{nik_2021,
author = {Nikolić Danilo and Stefanović, Darko and Dakic, Dusanka and Sladojevic, Srdan and Ristic, Sonja},
year = {2021},
month = {03},
pages = {1-6},
title = {Analysis of the Tools for Static Code Analysis},
doi = {10.1109/INFOTEH51037.2021.9400688}
}

@inproceedings{nach_2019,
  author={Nachtigall, Marcus and Nguyen Quang Do, Lisa and Bodden, Eric},
  booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW)}, 
  title={Explaining Static Analysis - A Perspective}, 
  year={2019},
  volume={},
  number={},
  pages={29-32},
  keywords={Program analysis;Static analysis;Explainability;User experience;Program understanding},
  doi={10.1109/ASEW.2019.00023}}

@inproceedings{car_2017,
  title={An Ontology-based Approach to Analyzing the Occurrence of Code Smells in Software},
  author={Luis Paulo da Silva Carvalho and Renato Lima Novais and La{\'i}s do Nascimento Salvador and Manoel G. Mendonça},
  booktitle={International Conference on Enterprise Information Systems},
  year={2017},
  url={https://api.semanticscholar.org/CorpusID:21143193}
}

@inproceedings{@gupta_2017,
  title={A Systematic Literature Review: Code Bad Smells in Java Source Code},
  author={Aakanshi Gupta and Bharti Suri and Sanjay Misra},
  booktitle={Communication Systems and Applications},
  year={2017},
  url={https://api.semanticscholar.org/CorpusID:5405255}
}

@article{palomba_2017,
  title={On the diffuseness and the impact on maintainability of code smells: a large scale empirical investigation},
  author={Fabio Palomba and Gabriele Bavota and Massimiliano Di Penta and Fausto Fasano and Rocco Oliveto and Andrea De Lucia},
  journal={Empirical Software Engineering},
  year={2017},
  volume={23},
  pages={1188 - 1221},
  url={https://api.semanticscholar.org/CorpusID:215767620}
}

@article{yu_2024,
  title={Code Reviewer Recommendation Based on a Hypergraph with Multiplex Relationships},
  author={Yu Qiao and Jian Wang and Can Cheng and Wei Tang and Peng Liang and Yuqi Zhao and Bing Li},
  journal={ArXiv},
  year={2024},
  volume={abs/2401.10755},
  url={https://api.semanticscholar.org/CorpusID:267061002}
}

@inproceedings{chirvase_2021,
  author={Chirvase, Alexandru and Ruse, Laura and Muraru, Mihnea and Mocanu, Mariana and Ciobanu, Vlad},
  booktitle={2021 23rd International Conference on Control Systems and Computer Science (CSCS)}, 
  title={Clean Code - Delivering A Lightweight Course}, 
  year={2021},
  volume={},
  number={},
  pages={420-423},
  keywords={Employment;Education;Control systems;Programming profession;Clean;Code;Course;Lightweight;Delivering;Code-quality;Teaching;Review},
  doi={10.1109/CSCS52396.2021.00075}
}

@article{sojer_2014,
author = {Sojer, Manuel and Alexy, Oliver and Kleinknecht, Sven and Henkel, Joachim},
year = {2014},
month = {07},
pages = {},
title = {Understanding the Drivers of Unethical Programming Behavior: The Inappropriate Reuse of Internet-Accessible Code},
volume = {forthcoming},
journal = {Journal of Management Information Systems},
doi = {10.1080/07421222.2014.995563}
}

@inproceedings{perceptions_alb,
author = {Albuquerque, Danyllo and Guimaraes, Everton Tavares and Tonin, Graziela Simone and Perkusich, Mirko Barbosa and Almeida, Hyggo and Perkusich, Angelo},
title = {Perceptions of Technical Debt and its Management Activities - A Survey of Software Practitioners},
year = {2022},
isbn = {9781450397353},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3555228.3555237},
doi = {10.1145/3555228.3555237},
abstract = {Technical Debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefits but might hurt the long-term health of a software system. Although several research efforts have been carried out, TD-related literature indicates that Technical Debt Management (TDM) is still incipient. Particularly in software organizations, there is still a lack of knowledge regarding how practitioners perceive TD and perform TDM in their projects. Our research focuses on characterizing TD and its management under the perspective of practitioners. For doing so, we conducted an online survey with 120 participants from 86 different organizations located in 5 different countries. Our results indicate that TD conception is widespread among more than 70\% of respondents. Most of them (72\%) recognized its importance and impact on software artifacts, being able to provide a valid example of three different TD Types (i.e., Design, Code, and Architectural). In addition, at least 65\% of respondents consider TD identification, TD Repayment, and TD prevention as TDM activities in the spotlight. However, less than 15\% adopt formal approaches to support these activities. This paper contributes to TD discussion and TDM activities by showing the practitioner’s perspective. Finally, further research will support observing how effective and efficient TDM activities can be in different contexts.},
booktitle = {Proceedings of the XXXVI Brazilian Symposium on Software Engineering},
pages = {220–229},
numpages = {10},
keywords = {Empirical Study, Survey, Technical Debt, Technical Debt Management},
location = {<conf-loc>, <city>Virtual Event</city>, <country>Brazil</country>, </conf-loc>},
series = {SBES '22}
}

@inproceedings{areti,
  author={Ampatzoglou, Areti and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris and Abrahamsson, Pekka and Martini, Antonio and Zdun, Uwe and Systa, Kari},
  booktitle={2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)}, 
  title={The Perception of Technical Debt in the Embedded Systems Domain: An Industrial Case Study}, 
  year={2016},
  volume={},
  number={},
  pages={9-16},
  keywords={Embedded systems;Industries;Companies;Embedded software;Time division multiplexing;Context;technical debt;embedded systems;industry;case study},
  doi={10.1109/MTD.2016.8}
  }

  @inproceedings{rios,
author = {Rios, Nicolli and Mendonça, Manoel and Seaman, Carolyn and Spínola, Rodrigo},
year = {2019},
month = {08},
pages = {},
title = {Causes and Effects of the Presence of Technical Debt in Agile Software Projects}
}

@article{lenarduzzi_2021,
title = {A systematic literature review on Technical Debt prioritization: Strategies, processes, factors, and tools},
journal = {Journal of Systems and Software},
volume = {171},
pages = {110827},
year = {2021},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2020.110827},
url = {https://www.sciencedirect.com/science/article/pii/S016412122030220X},
author = {Valentina Lenarduzzi and Terese Besker and Davide Taibi and Antonio Martini and Francesca {Arcelli Fontana}},
keywords = {Technical Debt, Technical Debt prioritization, Systematic Literature Review},
abstract = {Background
Software companies need to manage and refactor Technical Debt issues. Therefore, it is necessary to understand if and when refactoring of Technical Debt should be prioritized with respect to developing features or fixing bugs.
Objective
The goal of this study is to investigate the existing body of knowledge in software engineering to understand what Technical Debt prioritization approaches have been proposed in research and industry.
Method
We conducted a Systematic Literature Review of 557 unique papers published until 2020, following a consolidated methodology applied in software engineering. We included 44 primary studies.
Results
Different approaches have been proposed for Technical Debt prioritization, all having different goals and proposing optimization regarding different criteria. The proposed measures capture only a small part of the plethora of factors used to prioritize Technical Debt qualitatively in practice. We present an impact map of such factors. However, there is a lack of empirical and validated set of tools.
Conclusion
We observed that Technical Debt prioritization research is preliminary and there is no consensus on what the important factors are and how to measure them. Consequently, we cannot consider current research conclusive. In this paper, we therefore outline different directions for necessary future investigations.}
}

@article{samoaa,
author = {Samoaa, Peter and Longa, Antonio and Mohamad, Mazen and Haghir Chehreghani, Morteza and Leitner, Philipp},
year = {2022},
month = {08},
pages = {},
title = {TEP-GNN: Accurate Execution Time Prediction of Functional Tests using Graph Neural Networks}
}

@blog{codacy,
author={Codacy},
title={An easy-to use code quality review solution},
year={2013},
url={https://blog.codacy.com/loosely-coupled-architecture},
}

@inproceedings{10.1145/2837614.2837671,
author = {Raychev, Veselin and Bielik, Pavol and Vechev, Martin and Krause, Andreas},
title = {Learning programs from noisy data},
year = {2016},
isbn = {9781450335492},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2837614.2837671},
doi = {10.1145/2837614.2837671},
abstract = {We present a new approach for learning programs from noisy datasets. Our approach is based on two new concepts: a regularized program generator which produces a candidate program based on a small sample of the entire dataset while avoiding overfitting, and a dataset sampler which carefully samples the dataset by leveraging the candidate program's score on that dataset. The two components are connected in a continuous feedback-directed loop. We show how to apply this approach to two settings: one where the dataset has a bound on the noise, and another without a noise bound. The second setting leads to a new way of performing approximate empirical risk minimization on hypotheses classes formed by a discrete search space. We then present two new kinds of program synthesizers which target the two noise settings. First, we introduce a novel regularized bitstream synthesizer that successfully generates programs even in the presence of incorrect examples. We show that the synthesizer can detect errors in the examples while combating overfitting -- a major problem in existing synthesis techniques. We also show how the approach can be used in a setting where the dataset grows dynamically via new examples (e.g., provided by a human). Second, we present a novel technique for constructing statistical code completion systems. These are systems trained on massive datasets of open source programs, also known as ``Big Code''. The key idea is to introduce a domain specific language (DSL) over trees and to learn functions in that DSL directly from the dataset. These learned functions then condition the predictions made by the system. This is a flexible and powerful technique which generalizes several existing works as we no longer need to decide a priori on what the prediction should be conditioned (another benefit is that the learned functions are a natural mechanism for explaining the prediction). As a result, our code completion system surpasses the prediction capabilities of existing, hard-wired systems.},
booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {761–774},
numpages = {14},
keywords = {Anomaly Detection, Big Code, Noisy Data, Program Synthesis, Regularization, Statistical Code Completion},
location = {St. Petersburg, FL, USA},
series = {POPL '16}
}

@article{raychev_2016,
author = {Raychev, Veselin and Bielik, Pavol and Vechev, Martin and Krause, Andreas},
title = {Learning programs from noisy data},
year = {2016},
issue_date = {January 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/2914770.2837671},
doi = {10.1145/2914770.2837671},
journal = {SIGPLAN Not.},
month = {jan},
pages = {761–774},
numpages = {14},
keywords = {Anomaly Detection, Big Code, Noisy Data, Program Synthesis, Regularization, Statistical Code Completion}
}

@inproceedings{fer_2019,
  author={Ferreira Campos, Uriel and Smethurst, Guilherme and Moraes, João Pedro and Bonifácio, Rodrigo and Pinto, Gustavo},
  booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)}, 
  title={Mining Rule Violations in JavaScript Code Snippets}, 
  year={2019},
  volume={},
  number={},
  pages={195-199},
  keywords={Software;Best practices;Computer languages;Programming;Standards;Tools;Encoding;Rule Violations;Javascript code snippets;Es-linter},
  doi={10.1109/MSR.2019.00039}}

@inproceedings{sot_2019,
author = {Baltes, Sebastian and Treude, Christoph and Diehl, Stephan},
title = {SOTorrent: studying the origin, evolution, and usage of stack overflow code snippets},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2019.00038},
doi = {10.1109/MSR.2019.00038},
booktitle = {Proceedings of the 16th International Conference on Mining Software Repositories},
pages = {191–194},
numpages = {4},
location = {Montreal, Quebec, Canada},
series = {MSR '19}
}